#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HealthCheckMgt.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DeffinityFirstData")]
	public partial class HealthCheckDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertHealthCheckList(HealthCheckMgt.Entity.HealthCheckList instance);
    partial void UpdateHealthCheckList(HealthCheckMgt.Entity.HealthCheckList instance);
    partial void DeleteHealthCheckList(HealthCheckMgt.Entity.HealthCheckList instance);
    partial void InsertHealthCheck_Form(HealthCheckMgt.Entity.HealthCheck_Form instance);
    partial void UpdateHealthCheck_Form(HealthCheckMgt.Entity.HealthCheck_Form instance);
    partial void DeleteHealthCheck_Form(HealthCheckMgt.Entity.HealthCheck_Form instance);
    partial void InsertHealthCheckNameMailID(HealthCheckMgt.Entity.HealthCheckNameMailID instance);
    partial void UpdateHealthCheckNameMailID(HealthCheckMgt.Entity.HealthCheckNameMailID instance);
    partial void DeleteHealthCheckNameMailID(HealthCheckMgt.Entity.HealthCheckNameMailID instance);
    partial void InsertHealthCheck_FormAssignToCall(HealthCheckMgt.Entity.HealthCheck_FormAssignToCall instance);
    partial void UpdateHealthCheck_FormAssignToCall(HealthCheckMgt.Entity.HealthCheck_FormAssignToCall instance);
    partial void DeleteHealthCheck_FormAssignToCall(HealthCheckMgt.Entity.HealthCheck_FormAssignToCall instance);
    partial void InsertHealthCheck_FormData(HealthCheckMgt.Entity.HealthCheck_FormData instance);
    partial void UpdateHealthCheck_FormData(HealthCheckMgt.Entity.HealthCheck_FormData instance);
    partial void DeleteHealthCheck_FormData(HealthCheckMgt.Entity.HealthCheck_FormData instance);
    partial void InsertHealthCheck_FormPanel(HealthCheckMgt.Entity.HealthCheck_FormPanel instance);
    partial void UpdateHealthCheck_FormPanel(HealthCheckMgt.Entity.HealthCheck_FormPanel instance);
    partial void DeleteHealthCheck_FormPanel(HealthCheckMgt.Entity.HealthCheck_FormPanel instance);
    partial void InsertHealthCheck_FormAssignToProjectTask(HealthCheckMgt.Entity.HealthCheck_FormAssignToProjectTask instance);
    partial void UpdateHealthCheck_FormAssignToProjectTask(HealthCheckMgt.Entity.HealthCheck_FormAssignToProjectTask instance);
    partial void DeleteHealthCheck_FormAssignToProjectTask(HealthCheckMgt.Entity.HealthCheck_FormAssignToProjectTask instance);
    partial void InsertHealthCheck_Configurator(HealthCheckMgt.Entity.HealthCheck_Configurator instance);
    partial void UpdateHealthCheck_Configurator(HealthCheckMgt.Entity.HealthCheck_Configurator instance);
    partial void DeleteHealthCheck_Configurator(HealthCheckMgt.Entity.HealthCheck_Configurator instance);
    partial void InsertDN_Customerlogo(HealthCheckMgt.Entity.DN_Customerlogo instance);
    partial void UpdateDN_Customerlogo(HealthCheckMgt.Entity.DN_Customerlogo instance);
    partial void DeleteDN_Customerlogo(HealthCheckMgt.Entity.DN_Customerlogo instance);
    partial void InsertApp_Permission(HealthCheckMgt.Entity.App_Permission instance);
    partial void UpdateApp_Permission(HealthCheckMgt.Entity.App_Permission instance);
    partial void DeleteApp_Permission(HealthCheckMgt.Entity.App_Permission instance);
    partial void InsertAppManager(HealthCheckMgt.Entity.AppManager instance);
    partial void UpdateAppManager(HealthCheckMgt.Entity.AppManager instance);
    partial void DeleteAppManager(HealthCheckMgt.Entity.AppManager instance);
    partial void InsertAppManagerAssignedForm(HealthCheckMgt.Entity.AppManagerAssignedForm instance);
    partial void UpdateAppManagerAssignedForm(HealthCheckMgt.Entity.AppManagerAssignedForm instance);
    partial void DeleteAppManagerAssignedForm(HealthCheckMgt.Entity.AppManagerAssignedForm instance);
    partial void InsertgridColumnsVisibility(HealthCheckMgt.Entity.gridColumnsVisibility instance);
    partial void UpdategridColumnsVisibility(HealthCheckMgt.Entity.gridColumnsVisibility instance);
    partial void DeletegridColumnsVisibility(HealthCheckMgt.Entity.gridColumnsVisibility instance);
    partial void InsertHealthCheck_FormControl(HealthCheckMgt.Entity.HealthCheck_FormControl instance);
    partial void UpdateHealthCheck_FormControl(HealthCheckMgt.Entity.HealthCheck_FormControl instance);
    partial void DeleteHealthCheck_FormControl(HealthCheckMgt.Entity.HealthCheck_FormControl instance);
    #endregion
		
		public HealthCheckDataContext() : 
				base(global::DeffinityManager.Properties.Settings.Default.DBstring, mappingSource)
		{
			OnCreated();
		}
		
		public HealthCheckDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HealthCheckDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HealthCheckDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HealthCheckDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<HealthCheckMgt.Entity.HealthCheckList> HealthCheckLists
		{
			get
			{
				return this.GetTable<HealthCheckMgt.Entity.HealthCheckList>();
			}
		}
		
		public System.Data.Linq.Table<HealthCheckMgt.Entity.HealthCheck_Form> HealthCheck_Forms
		{
			get
			{
				return this.GetTable<HealthCheckMgt.Entity.HealthCheck_Form>();
			}
		}
		
		public System.Data.Linq.Table<HealthCheckMgt.Entity.HealthCheckNameMailID> HealthCheckNameMailIDs
		{
			get
			{
				return this.GetTable<HealthCheckMgt.Entity.HealthCheckNameMailID>();
			}
		}
		
		public System.Data.Linq.Table<HealthCheckMgt.Entity.HealthCheck_FormAssignToCall> HealthCheck_FormAssignToCalls
		{
			get
			{
				return this.GetTable<HealthCheckMgt.Entity.HealthCheck_FormAssignToCall>();
			}
		}
		
		public System.Data.Linq.Table<HealthCheckMgt.Entity.HealthCheck_FormData> HealthCheck_FormDatas
		{
			get
			{
				return this.GetTable<HealthCheckMgt.Entity.HealthCheck_FormData>();
			}
		}
		
		public System.Data.Linq.Table<HealthCheckMgt.Entity.HealthCheck_FormPanel> HealthCheck_FormPanels
		{
			get
			{
				return this.GetTable<HealthCheckMgt.Entity.HealthCheck_FormPanel>();
			}
		}
		
		public System.Data.Linq.Table<HealthCheckMgt.Entity.HealthCheck_FormAssignToProjectTask> HealthCheck_FormAssignToProjectTasks
		{
			get
			{
				return this.GetTable<HealthCheckMgt.Entity.HealthCheck_FormAssignToProjectTask>();
			}
		}
		
		public System.Data.Linq.Table<HealthCheckMgt.Entity.HealthCheck_Configurator> HealthCheck_Configurators
		{
			get
			{
				return this.GetTable<HealthCheckMgt.Entity.HealthCheck_Configurator>();
			}
		}
		
		public System.Data.Linq.Table<HealthCheckMgt.Entity.DN_Customerlogo> DN_Customerlogos
		{
			get
			{
				return this.GetTable<HealthCheckMgt.Entity.DN_Customerlogo>();
			}
		}
		
		public System.Data.Linq.Table<HealthCheckMgt.Entity.App_Permission> App_Permissions
		{
			get
			{
				return this.GetTable<HealthCheckMgt.Entity.App_Permission>();
			}
		}
		
		public System.Data.Linq.Table<HealthCheckMgt.Entity.AppManager> AppManagers
		{
			get
			{
				return this.GetTable<HealthCheckMgt.Entity.AppManager>();
			}
		}
		
		public System.Data.Linq.Table<HealthCheckMgt.Entity.AppManagerAssignedForm> AppManagerAssignedForms
		{
			get
			{
				return this.GetTable<HealthCheckMgt.Entity.AppManagerAssignedForm>();
			}
		}
		
		public System.Data.Linq.Table<HealthCheckMgt.Entity.gridColumnsVisibility> gridColumnsVisibilities
		{
			get
			{
				return this.GetTable<HealthCheckMgt.Entity.gridColumnsVisibility>();
			}
		}
		
		public System.Data.Linq.Table<HealthCheckMgt.Entity.HealthCheck_FormControl> HealthCheck_FormControls
		{
			get
			{
				return this.GetTable<HealthCheckMgt.Entity.HealthCheck_FormControl>();
			}
		}
		
		public System.Data.Linq.Table<HealthCheckMgt.Entity.HealthCheck_Recur> HealthCheck_Recurs
		{
			get
			{
				return this.GetTable<HealthCheckMgt.Entity.HealthCheck_Recur>();
			}
		}
	}
}
namespace HealthCheckMgt.Entity
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HealthCheckList")]
	public partial class HealthCheckList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _PortfolioHealthCheckID;
		
		private System.Nullable<System.DateTime> _DateRaised;
		
		private System.Nullable<int> _AssignedTeam;
		
		private System.Nullable<int> _Location;
		
		private string _Status;
		
		private string _Notes;
		
		private string _Issue;
		
		private string _IssueStatus;
		
		private string _RAG;
		
		private System.Nullable<int> _Assignmember;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPortfolioHealthCheckIDChanging(System.Nullable<int> value);
    partial void OnPortfolioHealthCheckIDChanged();
    partial void OnDateRaisedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateRaisedChanged();
    partial void OnAssignedTeamChanging(System.Nullable<int> value);
    partial void OnAssignedTeamChanged();
    partial void OnLocationChanging(System.Nullable<int> value);
    partial void OnLocationChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnIssueChanging(string value);
    partial void OnIssueChanged();
    partial void OnIssueStatusChanging(string value);
    partial void OnIssueStatusChanged();
    partial void OnRAGChanging(string value);
    partial void OnRAGChanged();
    partial void OnAssignmemberChanging(System.Nullable<int> value);
    partial void OnAssignmemberChanged();
    #endregion
		
		public HealthCheckList()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PortfolioHealthCheckID", DbType="Int")]
		public System.Nullable<int> PortfolioHealthCheckID
		{
			get
			{
				return this._PortfolioHealthCheckID;
			}
			set
			{
				if ((this._PortfolioHealthCheckID != value))
				{
					this.OnPortfolioHealthCheckIDChanging(value);
					this.SendPropertyChanging();
					this._PortfolioHealthCheckID = value;
					this.SendPropertyChanged("PortfolioHealthCheckID");
					this.OnPortfolioHealthCheckIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateRaised", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> DateRaised
		{
			get
			{
				return this._DateRaised;
			}
			set
			{
				if ((this._DateRaised != value))
				{
					this.OnDateRaisedChanging(value);
					this.SendPropertyChanging();
					this._DateRaised = value;
					this.SendPropertyChanged("DateRaised");
					this.OnDateRaisedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignedTeam", DbType="Int")]
		public System.Nullable<int> AssignedTeam
		{
			get
			{
				return this._AssignedTeam;
			}
			set
			{
				if ((this._AssignedTeam != value))
				{
					this.OnAssignedTeamChanging(value);
					this.SendPropertyChanging();
					this._AssignedTeam = value;
					this.SendPropertyChanged("AssignedTeam");
					this.OnAssignedTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="Int")]
		public System.Nullable<int> Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(20)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="VarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Issue", DbType="VarChar(MAX)")]
		public string Issue
		{
			get
			{
				return this._Issue;
			}
			set
			{
				if ((this._Issue != value))
				{
					this.OnIssueChanging(value);
					this.SendPropertyChanging();
					this._Issue = value;
					this.SendPropertyChanged("Issue");
					this.OnIssueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueStatus", DbType="VarChar(20)")]
		public string IssueStatus
		{
			get
			{
				return this._IssueStatus;
			}
			set
			{
				if ((this._IssueStatus != value))
				{
					this.OnIssueStatusChanging(value);
					this.SendPropertyChanging();
					this._IssueStatus = value;
					this.SendPropertyChanged("IssueStatus");
					this.OnIssueStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAG", DbType="VarChar(20)")]
		public string RAG
		{
			get
			{
				return this._RAG;
			}
			set
			{
				if ((this._RAG != value))
				{
					this.OnRAGChanging(value);
					this.SendPropertyChanging();
					this._RAG = value;
					this.SendPropertyChanged("RAG");
					this.OnRAGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Assignmember", DbType="Int")]
		public System.Nullable<int> Assignmember
		{
			get
			{
				return this._Assignmember;
			}
			set
			{
				if ((this._Assignmember != value))
				{
					this.OnAssignmemberChanging(value);
					this.SendPropertyChanging();
					this._Assignmember = value;
					this.SendPropertyChanged("Assignmember");
					this.OnAssignmemberChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HealthCheck_Forms")]
	public partial class HealthCheck_Form : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FormID;
		
		private string _FormName;
		
		private int _CustomerID;
		
		private string _FormBackColor;
		
		private EntitySet<HealthCheck_FormAssignToCall> _HealthCheck_FormAssignToCalls;
		
		private EntitySet<HealthCheck_FormPanel> _HealthCheck_FormPanels;
		
		private EntitySet<HealthCheck_FormAssignToProjectTask> _HealthCheck_FormAssignToProjectTasks;
		
		private EntitySet<AppManager> _AppManagers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormIDChanging(int value);
    partial void OnFormIDChanged();
    partial void OnFormNameChanging(string value);
    partial void OnFormNameChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnFormBackColorChanging(string value);
    partial void OnFormBackColorChanged();
    #endregion
		
		public HealthCheck_Form()
		{
			this._HealthCheck_FormAssignToCalls = new EntitySet<HealthCheck_FormAssignToCall>(new Action<HealthCheck_FormAssignToCall>(this.attach_HealthCheck_FormAssignToCalls), new Action<HealthCheck_FormAssignToCall>(this.detach_HealthCheck_FormAssignToCalls));
			this._HealthCheck_FormPanels = new EntitySet<HealthCheck_FormPanel>(new Action<HealthCheck_FormPanel>(this.attach_HealthCheck_FormPanels), new Action<HealthCheck_FormPanel>(this.detach_HealthCheck_FormPanels));
			this._HealthCheck_FormAssignToProjectTasks = new EntitySet<HealthCheck_FormAssignToProjectTask>(new Action<HealthCheck_FormAssignToProjectTask>(this.attach_HealthCheck_FormAssignToProjectTasks), new Action<HealthCheck_FormAssignToProjectTask>(this.detach_HealthCheck_FormAssignToProjectTasks));
			this._AppManagers = new EntitySet<AppManager>(new Action<AppManager>(this.attach_AppManagers), new Action<AppManager>(this.detach_AppManagers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FormID
		{
			get
			{
				return this._FormID;
			}
			set
			{
				if ((this._FormID != value))
				{
					this.OnFormIDChanging(value);
					this.SendPropertyChanging();
					this._FormID = value;
					this.SendPropertyChanged("FormID");
					this.OnFormIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormName", DbType="NVarChar(250)")]
		public string FormName
		{
			get
			{
				return this._FormName;
			}
			set
			{
				if ((this._FormName != value))
				{
					this.OnFormNameChanging(value);
					this.SendPropertyChanging();
					this._FormName = value;
					this.SendPropertyChanged("FormName");
					this.OnFormNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormBackColor", DbType="NVarChar(500)")]
		public string FormBackColor
		{
			get
			{
				return this._FormBackColor;
			}
			set
			{
				if ((this._FormBackColor != value))
				{
					this.OnFormBackColorChanging(value);
					this.SendPropertyChanging();
					this._FormBackColor = value;
					this.SendPropertyChanged("FormBackColor");
					this.OnFormBackColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HealthCheck_Form_HealthCheck_FormAssignToCall", Storage="_HealthCheck_FormAssignToCalls", ThisKey="FormID", OtherKey="FormID")]
		public EntitySet<HealthCheck_FormAssignToCall> HealthCheck_FormAssignToCalls
		{
			get
			{
				return this._HealthCheck_FormAssignToCalls;
			}
			set
			{
				this._HealthCheck_FormAssignToCalls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HealthCheck_Form_HealthCheck_FormPanel", Storage="_HealthCheck_FormPanels", ThisKey="FormID", OtherKey="FormID")]
		public EntitySet<HealthCheck_FormPanel> HealthCheck_FormPanels
		{
			get
			{
				return this._HealthCheck_FormPanels;
			}
			set
			{
				this._HealthCheck_FormPanels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HealthCheck_Form_HealthCheck_FormAssignToProjectTask", Storage="_HealthCheck_FormAssignToProjectTasks", ThisKey="FormID", OtherKey="FormID")]
		public EntitySet<HealthCheck_FormAssignToProjectTask> HealthCheck_FormAssignToProjectTasks
		{
			get
			{
				return this._HealthCheck_FormAssignToProjectTasks;
			}
			set
			{
				this._HealthCheck_FormAssignToProjectTasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HealthCheck_Form_AppManager", Storage="_AppManagers", ThisKey="FormID", OtherKey="FormID")]
		public EntitySet<AppManager> AppManagers
		{
			get
			{
				return this._AppManagers;
			}
			set
			{
				this._AppManagers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HealthCheck_FormAssignToCalls(HealthCheck_FormAssignToCall entity)
		{
			this.SendPropertyChanging();
			entity.HealthCheck_Form = this;
		}
		
		private void detach_HealthCheck_FormAssignToCalls(HealthCheck_FormAssignToCall entity)
		{
			this.SendPropertyChanging();
			entity.HealthCheck_Form = null;
		}
		
		private void attach_HealthCheck_FormPanels(HealthCheck_FormPanel entity)
		{
			this.SendPropertyChanging();
			entity.HealthCheck_Form = this;
		}
		
		private void detach_HealthCheck_FormPanels(HealthCheck_FormPanel entity)
		{
			this.SendPropertyChanging();
			entity.HealthCheck_Form = null;
		}
		
		private void attach_HealthCheck_FormAssignToProjectTasks(HealthCheck_FormAssignToProjectTask entity)
		{
			this.SendPropertyChanging();
			entity.HealthCheck_Form = this;
		}
		
		private void detach_HealthCheck_FormAssignToProjectTasks(HealthCheck_FormAssignToProjectTask entity)
		{
			this.SendPropertyChanging();
			entity.HealthCheck_Form = null;
		}
		
		private void attach_AppManagers(AppManager entity)
		{
			this.SendPropertyChanging();
			entity.HealthCheck_Form = this;
		}
		
		private void detach_AppManagers(AppManager entity)
		{
			this.SendPropertyChanging();
			entity.HealthCheck_Form = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HealthCheckNameMailID")]
	public partial class HealthCheckNameMailID : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _PortfolioHealthCheckID;
		
		private string _Name;
		
		private string _EmailID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPortfolioHealthCheckIDChanging(System.Nullable<int> value);
    partial void OnPortfolioHealthCheckIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailIDChanging(string value);
    partial void OnEmailIDChanged();
    #endregion
		
		public HealthCheckNameMailID()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PortfolioHealthCheckID", DbType="Int")]
		public System.Nullable<int> PortfolioHealthCheckID
		{
			get
			{
				return this._PortfolioHealthCheckID;
			}
			set
			{
				if ((this._PortfolioHealthCheckID != value))
				{
					this.OnPortfolioHealthCheckIDChanging(value);
					this.SendPropertyChanging();
					this._PortfolioHealthCheckID = value;
					this.SendPropertyChanged("PortfolioHealthCheckID");
					this.OnPortfolioHealthCheckIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailID", DbType="VarChar(100)")]
		public string EmailID
		{
			get
			{
				return this._EmailID;
			}
			set
			{
				if ((this._EmailID != value))
				{
					this.OnEmailIDChanging(value);
					this.SendPropertyChanging();
					this._EmailID = value;
					this.SendPropertyChanged("EmailID");
					this.OnEmailIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HealthCheck_FormAssignToCall")]
	public partial class HealthCheck_FormAssignToCall : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _CallID;
		
		private System.Nullable<int> _FormID;
		
		private EntityRef<HealthCheck_Form> _HealthCheck_Form;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCallIDChanging(System.Nullable<int> value);
    partial void OnCallIDChanged();
    partial void OnFormIDChanging(System.Nullable<int> value);
    partial void OnFormIDChanged();
    #endregion
		
		public HealthCheck_FormAssignToCall()
		{
			this._HealthCheck_Form = default(EntityRef<HealthCheck_Form>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CallID", DbType="Int")]
		public System.Nullable<int> CallID
		{
			get
			{
				return this._CallID;
			}
			set
			{
				if ((this._CallID != value))
				{
					this.OnCallIDChanging(value);
					this.SendPropertyChanging();
					this._CallID = value;
					this.SendPropertyChanged("CallID");
					this.OnCallIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormID", DbType="Int")]
		public System.Nullable<int> FormID
		{
			get
			{
				return this._FormID;
			}
			set
			{
				if ((this._FormID != value))
				{
					if (this._HealthCheck_Form.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormIDChanging(value);
					this.SendPropertyChanging();
					this._FormID = value;
					this.SendPropertyChanged("FormID");
					this.OnFormIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HealthCheck_Form_HealthCheck_FormAssignToCall", Storage="_HealthCheck_Form", ThisKey="FormID", OtherKey="FormID", IsForeignKey=true)]
		public HealthCheck_Form HealthCheck_Form
		{
			get
			{
				return this._HealthCheck_Form.Entity;
			}
			set
			{
				HealthCheck_Form previousValue = this._HealthCheck_Form.Entity;
				if (((previousValue != value) 
							|| (this._HealthCheck_Form.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HealthCheck_Form.Entity = null;
						previousValue.HealthCheck_FormAssignToCalls.Remove(this);
					}
					this._HealthCheck_Form.Entity = value;
					if ((value != null))
					{
						value.HealthCheck_FormAssignToCalls.Add(this);
						this._FormID = value.FormID;
					}
					else
					{
						this._FormID = default(Nullable<int>);
					}
					this.SendPropertyChanged("HealthCheck_Form");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HealthCheck_FormData")]
	public partial class HealthCheck_FormData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _HealthCheckID;
		
		private System.Nullable<int> _ControlID;
		
		private string _ControlValue;
		
		private string _Section;
		
		private EntityRef<HealthCheck_FormControl> _HealthCheck_FormControl;
		
		private EntityRef<HealthCheck_FormControl> _HealthCheck_FormControl1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnHealthCheckIDChanging(System.Nullable<int> value);
    partial void OnHealthCheckIDChanged();
    partial void OnControlIDChanging(System.Nullable<int> value);
    partial void OnControlIDChanged();
    partial void OnControlValueChanging(string value);
    partial void OnControlValueChanged();
    partial void OnSectionChanging(string value);
    partial void OnSectionChanged();
    #endregion
		
		public HealthCheck_FormData()
		{
			this._HealthCheck_FormControl = default(EntityRef<HealthCheck_FormControl>);
			this._HealthCheck_FormControl1 = default(EntityRef<HealthCheck_FormControl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HealthCheckID", DbType="Int")]
		public System.Nullable<int> HealthCheckID
		{
			get
			{
				return this._HealthCheckID;
			}
			set
			{
				if ((this._HealthCheckID != value))
				{
					this.OnHealthCheckIDChanging(value);
					this.SendPropertyChanging();
					this._HealthCheckID = value;
					this.SendPropertyChanged("HealthCheckID");
					this.OnHealthCheckIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlID", DbType="Int")]
		public System.Nullable<int> ControlID
		{
			get
			{
				return this._ControlID;
			}
			set
			{
				if ((this._ControlID != value))
				{
					if ((this._HealthCheck_FormControl.HasLoadedOrAssignedValue || this._HealthCheck_FormControl1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnControlIDChanging(value);
					this.SendPropertyChanging();
					this._ControlID = value;
					this.SendPropertyChanged("ControlID");
					this.OnControlIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlValue", DbType="NVarChar(MAX)")]
		public string ControlValue
		{
			get
			{
				return this._ControlValue;
			}
			set
			{
				if ((this._ControlValue != value))
				{
					this.OnControlValueChanging(value);
					this.SendPropertyChanging();
					this._ControlValue = value;
					this.SendPropertyChanged("ControlValue");
					this.OnControlValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Section", DbType="NVarChar(50)")]
		public string Section
		{
			get
			{
				return this._Section;
			}
			set
			{
				if ((this._Section != value))
				{
					this.OnSectionChanging(value);
					this.SendPropertyChanging();
					this._Section = value;
					this.SendPropertyChanged("Section");
					this.OnSectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HealthCheck_FormControl_HealthCheck_FormData", Storage="_HealthCheck_FormControl", ThisKey="ControlID", OtherKey="ControlID", IsForeignKey=true)]
		public HealthCheck_FormControl HealthCheck_FormControl
		{
			get
			{
				return this._HealthCheck_FormControl.Entity;
			}
			set
			{
				HealthCheck_FormControl previousValue = this._HealthCheck_FormControl.Entity;
				if (((previousValue != value) 
							|| (this._HealthCheck_FormControl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HealthCheck_FormControl.Entity = null;
						previousValue.HealthCheck_FormDatas.Remove(this);
					}
					this._HealthCheck_FormControl.Entity = value;
					if ((value != null))
					{
						value.HealthCheck_FormDatas.Add(this);
						this._ControlID = value.ControlID;
					}
					else
					{
						this._ControlID = default(Nullable<int>);
					}
					this.SendPropertyChanged("HealthCheck_FormControl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HealthCheck_FormControl_HealthCheck_FormData1", Storage="_HealthCheck_FormControl1", ThisKey="ControlID", OtherKey="ControlID", IsForeignKey=true)]
		public HealthCheck_FormControl HealthCheck_FormControl1
		{
			get
			{
				return this._HealthCheck_FormControl1.Entity;
			}
			set
			{
				HealthCheck_FormControl previousValue = this._HealthCheck_FormControl1.Entity;
				if (((previousValue != value) 
							|| (this._HealthCheck_FormControl1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HealthCheck_FormControl1.Entity = null;
						previousValue.HealthCheck_FormDatas1.Remove(this);
					}
					this._HealthCheck_FormControl1.Entity = value;
					if ((value != null))
					{
						value.HealthCheck_FormDatas1.Add(this);
						this._ControlID = value.ControlID;
					}
					else
					{
						this._ControlID = default(Nullable<int>);
					}
					this.SendPropertyChanged("HealthCheck_FormControl1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HealthCheck_FormPanels")]
	public partial class HealthCheck_FormPanel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PanelID;
		
		private System.Nullable<int> _FormID;
		
		private string _PanelName;
		
		private string _PanelBackColor;
		
		private System.Nullable<int> _PanelRows;
		
		private System.Nullable<int> _PanelColumns;
		
		private System.Nullable<int> _PnlPosition;
		
		private EntitySet<HealthCheck_FormControl> _HealthCheck_FormControls;
		
		private EntitySet<HealthCheck_FormControl> _HealthCheck_FormControls1;
		
		private EntityRef<HealthCheck_Form> _HealthCheck_Form;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPanelIDChanging(int value);
    partial void OnPanelIDChanged();
    partial void OnFormIDChanging(System.Nullable<int> value);
    partial void OnFormIDChanged();
    partial void OnPanelNameChanging(string value);
    partial void OnPanelNameChanged();
    partial void OnPanelBackColorChanging(string value);
    partial void OnPanelBackColorChanged();
    partial void OnPanelRowsChanging(System.Nullable<int> value);
    partial void OnPanelRowsChanged();
    partial void OnPanelColumnsChanging(System.Nullable<int> value);
    partial void OnPanelColumnsChanged();
    partial void OnPnlPositionChanging(System.Nullable<int> value);
    partial void OnPnlPositionChanged();
    #endregion
		
		public HealthCheck_FormPanel()
		{
			this._HealthCheck_FormControls = new EntitySet<HealthCheck_FormControl>(new Action<HealthCheck_FormControl>(this.attach_HealthCheck_FormControls), new Action<HealthCheck_FormControl>(this.detach_HealthCheck_FormControls));
			this._HealthCheck_FormControls1 = new EntitySet<HealthCheck_FormControl>(new Action<HealthCheck_FormControl>(this.attach_HealthCheck_FormControls1), new Action<HealthCheck_FormControl>(this.detach_HealthCheck_FormControls1));
			this._HealthCheck_Form = default(EntityRef<HealthCheck_Form>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PanelID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PanelID
		{
			get
			{
				return this._PanelID;
			}
			set
			{
				if ((this._PanelID != value))
				{
					this.OnPanelIDChanging(value);
					this.SendPropertyChanging();
					this._PanelID = value;
					this.SendPropertyChanged("PanelID");
					this.OnPanelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormID", DbType="Int")]
		public System.Nullable<int> FormID
		{
			get
			{
				return this._FormID;
			}
			set
			{
				if ((this._FormID != value))
				{
					if (this._HealthCheck_Form.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormIDChanging(value);
					this.SendPropertyChanging();
					this._FormID = value;
					this.SendPropertyChanged("FormID");
					this.OnFormIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PanelName", DbType="NVarChar(250)")]
		public string PanelName
		{
			get
			{
				return this._PanelName;
			}
			set
			{
				if ((this._PanelName != value))
				{
					this.OnPanelNameChanging(value);
					this.SendPropertyChanging();
					this._PanelName = value;
					this.SendPropertyChanged("PanelName");
					this.OnPanelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PanelBackColor", DbType="NVarChar(250)")]
		public string PanelBackColor
		{
			get
			{
				return this._PanelBackColor;
			}
			set
			{
				if ((this._PanelBackColor != value))
				{
					this.OnPanelBackColorChanging(value);
					this.SendPropertyChanging();
					this._PanelBackColor = value;
					this.SendPropertyChanged("PanelBackColor");
					this.OnPanelBackColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PanelRows", DbType="Int")]
		public System.Nullable<int> PanelRows
		{
			get
			{
				return this._PanelRows;
			}
			set
			{
				if ((this._PanelRows != value))
				{
					this.OnPanelRowsChanging(value);
					this.SendPropertyChanging();
					this._PanelRows = value;
					this.SendPropertyChanged("PanelRows");
					this.OnPanelRowsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PanelColumns", DbType="Int")]
		public System.Nullable<int> PanelColumns
		{
			get
			{
				return this._PanelColumns;
			}
			set
			{
				if ((this._PanelColumns != value))
				{
					this.OnPanelColumnsChanging(value);
					this.SendPropertyChanging();
					this._PanelColumns = value;
					this.SendPropertyChanged("PanelColumns");
					this.OnPanelColumnsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PnlPosition", DbType="Int")]
		public System.Nullable<int> PnlPosition
		{
			get
			{
				return this._PnlPosition;
			}
			set
			{
				if ((this._PnlPosition != value))
				{
					this.OnPnlPositionChanging(value);
					this.SendPropertyChanging();
					this._PnlPosition = value;
					this.SendPropertyChanged("PnlPosition");
					this.OnPnlPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HealthCheck_FormPanel_HealthCheck_FormControl", Storage="_HealthCheck_FormControls", ThisKey="PanelID", OtherKey="PanelID")]
		public EntitySet<HealthCheck_FormControl> HealthCheck_FormControls
		{
			get
			{
				return this._HealthCheck_FormControls;
			}
			set
			{
				this._HealthCheck_FormControls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HealthCheck_FormPanel_HealthCheck_FormControl1", Storage="_HealthCheck_FormControls1", ThisKey="PanelID", OtherKey="PanelID")]
		public EntitySet<HealthCheck_FormControl> HealthCheck_FormControls1
		{
			get
			{
				return this._HealthCheck_FormControls1;
			}
			set
			{
				this._HealthCheck_FormControls1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HealthCheck_Form_HealthCheck_FormPanel", Storage="_HealthCheck_Form", ThisKey="FormID", OtherKey="FormID", IsForeignKey=true)]
		public HealthCheck_Form HealthCheck_Form
		{
			get
			{
				return this._HealthCheck_Form.Entity;
			}
			set
			{
				HealthCheck_Form previousValue = this._HealthCheck_Form.Entity;
				if (((previousValue != value) 
							|| (this._HealthCheck_Form.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HealthCheck_Form.Entity = null;
						previousValue.HealthCheck_FormPanels.Remove(this);
					}
					this._HealthCheck_Form.Entity = value;
					if ((value != null))
					{
						value.HealthCheck_FormPanels.Add(this);
						this._FormID = value.FormID;
					}
					else
					{
						this._FormID = default(Nullable<int>);
					}
					this.SendPropertyChanged("HealthCheck_Form");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HealthCheck_FormControls(HealthCheck_FormControl entity)
		{
			this.SendPropertyChanging();
			entity.HealthCheck_FormPanel = this;
		}
		
		private void detach_HealthCheck_FormControls(HealthCheck_FormControl entity)
		{
			this.SendPropertyChanging();
			entity.HealthCheck_FormPanel = null;
		}
		
		private void attach_HealthCheck_FormControls1(HealthCheck_FormControl entity)
		{
			this.SendPropertyChanging();
			entity.HealthCheck_FormPanel1 = this;
		}
		
		private void detach_HealthCheck_FormControls1(HealthCheck_FormControl entity)
		{
			this.SendPropertyChanging();
			entity.HealthCheck_FormPanel1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HealthCheck_FormAssignToProjectTask")]
	public partial class HealthCheck_FormAssignToProjectTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _TaskID;
		
		private System.Nullable<int> _FormID;
		
		private EntityRef<HealthCheck_Form> _HealthCheck_Form;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTaskIDChanging(System.Nullable<int> value);
    partial void OnTaskIDChanged();
    partial void OnFormIDChanging(System.Nullable<int> value);
    partial void OnFormIDChanged();
    #endregion
		
		public HealthCheck_FormAssignToProjectTask()
		{
			this._HealthCheck_Form = default(EntityRef<HealthCheck_Form>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", DbType="Int")]
		public System.Nullable<int> TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormID", DbType="Int")]
		public System.Nullable<int> FormID
		{
			get
			{
				return this._FormID;
			}
			set
			{
				if ((this._FormID != value))
				{
					if (this._HealthCheck_Form.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormIDChanging(value);
					this.SendPropertyChanging();
					this._FormID = value;
					this.SendPropertyChanged("FormID");
					this.OnFormIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HealthCheck_Form_HealthCheck_FormAssignToProjectTask", Storage="_HealthCheck_Form", ThisKey="FormID", OtherKey="FormID", IsForeignKey=true)]
		public HealthCheck_Form HealthCheck_Form
		{
			get
			{
				return this._HealthCheck_Form.Entity;
			}
			set
			{
				HealthCheck_Form previousValue = this._HealthCheck_Form.Entity;
				if (((previousValue != value) 
							|| (this._HealthCheck_Form.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HealthCheck_Form.Entity = null;
						previousValue.HealthCheck_FormAssignToProjectTasks.Remove(this);
					}
					this._HealthCheck_Form.Entity = value;
					if ((value != null))
					{
						value.HealthCheck_FormAssignToProjectTasks.Add(this);
						this._FormID = value.FormID;
					}
					else
					{
						this._FormID = default(Nullable<int>);
					}
					this.SendPropertyChanged("HealthCheck_Form");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HealthCheck_Configurator")]
	public partial class HealthCheck_Configurator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _FieldId;
		
		private System.Nullable<int> _CustomerId;
		
		private System.Nullable<bool> _visibility;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFieldIdChanging(System.Nullable<int> value);
    partial void OnFieldIdChanged();
    partial void OnCustomerIdChanging(System.Nullable<int> value);
    partial void OnCustomerIdChanged();
    partial void OnvisibilityChanging(System.Nullable<bool> value);
    partial void OnvisibilityChanged();
    #endregion
		
		public HealthCheck_Configurator()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldId", DbType="Int")]
		public System.Nullable<int> FieldId
		{
			get
			{
				return this._FieldId;
			}
			set
			{
				if ((this._FieldId != value))
				{
					this.OnFieldIdChanging(value);
					this.SendPropertyChanging();
					this._FieldId = value;
					this.SendPropertyChanged("FieldId");
					this.OnFieldIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int")]
		public System.Nullable<int> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_visibility", DbType="Bit")]
		public System.Nullable<bool> visibility
		{
			get
			{
				return this._visibility;
			}
			set
			{
				if ((this._visibility != value))
				{
					this.OnvisibilityChanging(value);
					this.SendPropertyChanging();
					this._visibility = value;
					this.SendPropertyChanged("visibility");
					this.OnvisibilityChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DN_Customerlogo")]
	public partial class DN_Customerlogo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _CustomerId;
		
		private System.Nullable<int> _EmailTypeId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCustomerIdChanging(System.Nullable<int> value);
    partial void OnCustomerIdChanged();
    partial void OnEmailTypeIdChanging(System.Nullable<int> value);
    partial void OnEmailTypeIdChanged();
    #endregion
		
		public DN_Customerlogo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int")]
		public System.Nullable<int> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailTypeId", DbType="Int")]
		public System.Nullable<int> EmailTypeId
		{
			get
			{
				return this._EmailTypeId;
			}
			set
			{
				if ((this._EmailTypeId != value))
				{
					this.OnEmailTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EmailTypeId = value;
					this.SendPropertyChanged("EmailTypeId");
					this.OnEmailTypeIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.App_Permissions")]
	public partial class App_Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _UserId;
		
		private System.Nullable<int> _PermissionId;
		
		private System.Nullable<int> _AppId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnPermissionIdChanging(System.Nullable<int> value);
    partial void OnPermissionIdChanged();
    partial void OnAppIdChanging(System.Nullable<int> value);
    partial void OnAppIdChanged();
    #endregion
		
		public App_Permission()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionId", DbType="Int")]
		public System.Nullable<int> PermissionId
		{
			get
			{
				return this._PermissionId;
			}
			set
			{
				if ((this._PermissionId != value))
				{
					this.OnPermissionIdChanging(value);
					this.SendPropertyChanging();
					this._PermissionId = value;
					this.SendPropertyChanged("PermissionId");
					this.OnPermissionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppId", DbType="Int")]
		public System.Nullable<int> AppId
		{
			get
			{
				return this._AppId;
			}
			set
			{
				if ((this._AppId != value))
				{
					this.OnAppIdChanging(value);
					this.SendPropertyChanging();
					this._AppId = value;
					this.SendPropertyChanged("AppId");
					this.OnAppIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AppManager")]
	public partial class AppManager : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<int> _FormID;
		
		private string _Icon;
		
		private System.Nullable<int> _ChildFormId;
		
		private string _Type;
		
		private System.Nullable<bool> _EngineerView;
		
		private System.Nullable<bool> _CustomerView;
		
		private EntitySet<AppManagerAssignedForm> _AppManagerAssignedForms;
		
		private EntityRef<HealthCheck_Form> _HealthCheck_Form;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFormIDChanging(System.Nullable<int> value);
    partial void OnFormIDChanged();
    partial void OnIconChanging(string value);
    partial void OnIconChanged();
    partial void OnChildFormIdChanging(System.Nullable<int> value);
    partial void OnChildFormIdChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnEngineerViewChanging(System.Nullable<bool> value);
    partial void OnEngineerViewChanged();
    partial void OnCustomerViewChanging(System.Nullable<bool> value);
    partial void OnCustomerViewChanged();
    #endregion
		
		public AppManager()
		{
			this._AppManagerAssignedForms = new EntitySet<AppManagerAssignedForm>(new Action<AppManagerAssignedForm>(this.attach_AppManagerAssignedForms), new Action<AppManagerAssignedForm>(this.detach_AppManagerAssignedForms));
			this._HealthCheck_Form = default(EntityRef<HealthCheck_Form>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormID", DbType="Int")]
		public System.Nullable<int> FormID
		{
			get
			{
				return this._FormID;
			}
			set
			{
				if ((this._FormID != value))
				{
					if (this._HealthCheck_Form.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormIDChanging(value);
					this.SendPropertyChanging();
					this._FormID = value;
					this.SendPropertyChanged("FormID");
					this.OnFormIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Icon", DbType="VarChar(250)")]
		public string Icon
		{
			get
			{
				return this._Icon;
			}
			set
			{
				if ((this._Icon != value))
				{
					this.OnIconChanging(value);
					this.SendPropertyChanging();
					this._Icon = value;
					this.SendPropertyChanged("Icon");
					this.OnIconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChildFormId", DbType="Int")]
		public System.Nullable<int> ChildFormId
		{
			get
			{
				return this._ChildFormId;
			}
			set
			{
				if ((this._ChildFormId != value))
				{
					this.OnChildFormIdChanging(value);
					this.SendPropertyChanging();
					this._ChildFormId = value;
					this.SendPropertyChanged("ChildFormId");
					this.OnChildFormIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(100)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineerView", DbType="Bit")]
		public System.Nullable<bool> EngineerView
		{
			get
			{
				return this._EngineerView;
			}
			set
			{
				if ((this._EngineerView != value))
				{
					this.OnEngineerViewChanging(value);
					this.SendPropertyChanging();
					this._EngineerView = value;
					this.SendPropertyChanged("EngineerView");
					this.OnEngineerViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerView", DbType="Bit")]
		public System.Nullable<bool> CustomerView
		{
			get
			{
				return this._CustomerView;
			}
			set
			{
				if ((this._CustomerView != value))
				{
					this.OnCustomerViewChanging(value);
					this.SendPropertyChanging();
					this._CustomerView = value;
					this.SendPropertyChanged("CustomerView");
					this.OnCustomerViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AppManager_AppManagerAssignedForm", Storage="_AppManagerAssignedForms", ThisKey="ID", OtherKey="AppID")]
		public EntitySet<AppManagerAssignedForm> AppManagerAssignedForms
		{
			get
			{
				return this._AppManagerAssignedForms;
			}
			set
			{
				this._AppManagerAssignedForms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HealthCheck_Form_AppManager", Storage="_HealthCheck_Form", ThisKey="FormID", OtherKey="FormID", IsForeignKey=true)]
		public HealthCheck_Form HealthCheck_Form
		{
			get
			{
				return this._HealthCheck_Form.Entity;
			}
			set
			{
				HealthCheck_Form previousValue = this._HealthCheck_Form.Entity;
				if (((previousValue != value) 
							|| (this._HealthCheck_Form.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HealthCheck_Form.Entity = null;
						previousValue.AppManagers.Remove(this);
					}
					this._HealthCheck_Form.Entity = value;
					if ((value != null))
					{
						value.AppManagers.Add(this);
						this._FormID = value.FormID;
					}
					else
					{
						this._FormID = default(Nullable<int>);
					}
					this.SendPropertyChanged("HealthCheck_Form");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AppManagerAssignedForms(AppManagerAssignedForm entity)
		{
			this.SendPropertyChanging();
			entity.AppManager = this;
		}
		
		private void detach_AppManagerAssignedForms(AppManagerAssignedForm entity)
		{
			this.SendPropertyChanging();
			entity.AppManager = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AppManagerAssignedForm")]
	public partial class AppManagerAssignedForm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _AppID;
		
		private string _FormName;
		
		private string _Notes;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private string _Form_Type;
		
		private System.Nullable<int> _ParentFormId;
		
		private EntityRef<AppManager> _AppManager;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAppIDChanging(System.Nullable<int> value);
    partial void OnAppIDChanged();
    partial void OnFormNameChanging(string value);
    partial void OnFormNameChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnForm_TypeChanging(string value);
    partial void OnForm_TypeChanged();
    partial void OnParentFormIdChanging(System.Nullable<int> value);
    partial void OnParentFormIdChanged();
    #endregion
		
		public AppManagerAssignedForm()
		{
			this._AppManager = default(EntityRef<AppManager>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppID", DbType="Int")]
		public System.Nullable<int> AppID
		{
			get
			{
				return this._AppID;
			}
			set
			{
				if ((this._AppID != value))
				{
					if (this._AppManager.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAppIDChanging(value);
					this.SendPropertyChanging();
					this._AppID = value;
					this.SendPropertyChanged("AppID");
					this.OnAppIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormName", DbType="VarChar(250)")]
		public string FormName
		{
			get
			{
				return this._FormName;
			}
			set
			{
				if ((this._FormName != value))
				{
					this.OnFormNameChanging(value);
					this.SendPropertyChanging();
					this._FormName = value;
					this.SendPropertyChanged("FormName");
					this.OnFormNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="VarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Form_Type", DbType="VarChar(150)")]
		public string Form_Type
		{
			get
			{
				return this._Form_Type;
			}
			set
			{
				if ((this._Form_Type != value))
				{
					this.OnForm_TypeChanging(value);
					this.SendPropertyChanging();
					this._Form_Type = value;
					this.SendPropertyChanged("Form_Type");
					this.OnForm_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentFormId", DbType="Int")]
		public System.Nullable<int> ParentFormId
		{
			get
			{
				return this._ParentFormId;
			}
			set
			{
				if ((this._ParentFormId != value))
				{
					this.OnParentFormIdChanging(value);
					this.SendPropertyChanging();
					this._ParentFormId = value;
					this.SendPropertyChanged("ParentFormId");
					this.OnParentFormIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AppManager_AppManagerAssignedForm", Storage="_AppManager", ThisKey="AppID", OtherKey="ID", IsForeignKey=true)]
		public AppManager AppManager
		{
			get
			{
				return this._AppManager.Entity;
			}
			set
			{
				AppManager previousValue = this._AppManager.Entity;
				if (((previousValue != value) 
							|| (this._AppManager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AppManager.Entity = null;
						previousValue.AppManagerAssignedForms.Remove(this);
					}
					this._AppManager.Entity = value;
					if ((value != null))
					{
						value.AppManagerAssignedForms.Add(this);
						this._AppID = value.ID;
					}
					else
					{
						this._AppID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AppManager");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.gridColumnsVisibility")]
	public partial class gridColumnsVisibility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Appid;
		
		private System.Nullable<int> _ColumnId;
		
		private System.Nullable<bool> _Visibility;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAppidChanging(System.Nullable<int> value);
    partial void OnAppidChanged();
    partial void OnColumnIdChanging(System.Nullable<int> value);
    partial void OnColumnIdChanged();
    partial void OnVisibilityChanging(System.Nullable<bool> value);
    partial void OnVisibilityChanged();
    #endregion
		
		public gridColumnsVisibility()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appid", DbType="Int")]
		public System.Nullable<int> Appid
		{
			get
			{
				return this._Appid;
			}
			set
			{
				if ((this._Appid != value))
				{
					this.OnAppidChanging(value);
					this.SendPropertyChanging();
					this._Appid = value;
					this.SendPropertyChanged("Appid");
					this.OnAppidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColumnId", DbType="Int")]
		public System.Nullable<int> ColumnId
		{
			get
			{
				return this._ColumnId;
			}
			set
			{
				if ((this._ColumnId != value))
				{
					this.OnColumnIdChanging(value);
					this.SendPropertyChanging();
					this._ColumnId = value;
					this.SendPropertyChanged("ColumnId");
					this.OnColumnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Visibility", DbType="Bit")]
		public System.Nullable<bool> Visibility
		{
			get
			{
				return this._Visibility;
			}
			set
			{
				if ((this._Visibility != value))
				{
					this.OnVisibilityChanging(value);
					this.SendPropertyChanging();
					this._Visibility = value;
					this.SendPropertyChanged("Visibility");
					this.OnVisibilityChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HealthCheck_FormControls")]
	public partial class HealthCheck_FormControl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ControlID;
		
		private System.Nullable<int> _PanelID;
		
		private string _TypeOfField;
		
		private string _ControlLabelName;
		
		private string _ControlValue;
		
		private string _DefaultText;
		
		private string _MinValue;
		
		private string _MaxValue;
		
		private string _ListValues;
		
		private System.Nullable<bool> _Mandatory;
		
		private System.Nullable<int> _RowIndex;
		
		private System.Nullable<int> _ColumnIndex;
		
		private System.Nullable<int> _ListPosition;
		
		private System.Nullable<int> _ControlWidth;
		
		private string _ControlPosition;
		
		private System.Nullable<int> _Height;
		
		private string _CblPosition;
		
		private string _columnlist;
		
		private string _TypeofFieldInTbl;
		
		private string _Helptext;
		
		private EntitySet<HealthCheck_FormData> _HealthCheck_FormDatas;
		
		private EntitySet<HealthCheck_FormData> _HealthCheck_FormDatas1;
		
		private EntityRef<HealthCheck_FormPanel> _HealthCheck_FormPanel;
		
		private EntityRef<HealthCheck_FormPanel> _HealthCheck_FormPanel1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnControlIDChanging(int value);
    partial void OnControlIDChanged();
    partial void OnPanelIDChanging(System.Nullable<int> value);
    partial void OnPanelIDChanged();
    partial void OnTypeOfFieldChanging(string value);
    partial void OnTypeOfFieldChanged();
    partial void OnControlLabelNameChanging(string value);
    partial void OnControlLabelNameChanged();
    partial void OnControlValueChanging(string value);
    partial void OnControlValueChanged();
    partial void OnDefaultTextChanging(string value);
    partial void OnDefaultTextChanged();
    partial void OnMinValueChanging(string value);
    partial void OnMinValueChanged();
    partial void OnMaxValueChanging(string value);
    partial void OnMaxValueChanged();
    partial void OnListValuesChanging(string value);
    partial void OnListValuesChanged();
    partial void OnMandatoryChanging(System.Nullable<bool> value);
    partial void OnMandatoryChanged();
    partial void OnRowIndexChanging(System.Nullable<int> value);
    partial void OnRowIndexChanged();
    partial void OnColumnIndexChanging(System.Nullable<int> value);
    partial void OnColumnIndexChanged();
    partial void OnListPositionChanging(System.Nullable<int> value);
    partial void OnListPositionChanged();
    partial void OnControlWidthChanging(System.Nullable<int> value);
    partial void OnControlWidthChanged();
    partial void OnControlPositionChanging(string value);
    partial void OnControlPositionChanged();
    partial void OnHeightChanging(System.Nullable<int> value);
    partial void OnHeightChanged();
    partial void OnCblPositionChanging(string value);
    partial void OnCblPositionChanged();
    partial void OncolumnlistChanging(string value);
    partial void OncolumnlistChanged();
    partial void OnTypeofFieldInTblChanging(string value);
    partial void OnTypeofFieldInTblChanged();
    partial void OnHelptextChanging(string value);
    partial void OnHelptextChanged();
    #endregion
		
		public HealthCheck_FormControl()
		{
			this._HealthCheck_FormDatas = new EntitySet<HealthCheck_FormData>(new Action<HealthCheck_FormData>(this.attach_HealthCheck_FormDatas), new Action<HealthCheck_FormData>(this.detach_HealthCheck_FormDatas));
			this._HealthCheck_FormDatas1 = new EntitySet<HealthCheck_FormData>(new Action<HealthCheck_FormData>(this.attach_HealthCheck_FormDatas1), new Action<HealthCheck_FormData>(this.detach_HealthCheck_FormDatas1));
			this._HealthCheck_FormPanel = default(EntityRef<HealthCheck_FormPanel>);
			this._HealthCheck_FormPanel1 = default(EntityRef<HealthCheck_FormPanel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ControlID
		{
			get
			{
				return this._ControlID;
			}
			set
			{
				if ((this._ControlID != value))
				{
					this.OnControlIDChanging(value);
					this.SendPropertyChanging();
					this._ControlID = value;
					this.SendPropertyChanged("ControlID");
					this.OnControlIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PanelID", DbType="Int")]
		public System.Nullable<int> PanelID
		{
			get
			{
				return this._PanelID;
			}
			set
			{
				if ((this._PanelID != value))
				{
					if ((this._HealthCheck_FormPanel.HasLoadedOrAssignedValue || this._HealthCheck_FormPanel1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPanelIDChanging(value);
					this.SendPropertyChanging();
					this._PanelID = value;
					this.SendPropertyChanged("PanelID");
					this.OnPanelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfField", DbType="NVarChar(100)")]
		public string TypeOfField
		{
			get
			{
				return this._TypeOfField;
			}
			set
			{
				if ((this._TypeOfField != value))
				{
					this.OnTypeOfFieldChanging(value);
					this.SendPropertyChanging();
					this._TypeOfField = value;
					this.SendPropertyChanged("TypeOfField");
					this.OnTypeOfFieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlLabelName", DbType="NVarChar(250)")]
		public string ControlLabelName
		{
			get
			{
				return this._ControlLabelName;
			}
			set
			{
				if ((this._ControlLabelName != value))
				{
					this.OnControlLabelNameChanging(value);
					this.SendPropertyChanging();
					this._ControlLabelName = value;
					this.SendPropertyChanged("ControlLabelName");
					this.OnControlLabelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlValue", DbType="NVarChar(MAX)")]
		public string ControlValue
		{
			get
			{
				return this._ControlValue;
			}
			set
			{
				if ((this._ControlValue != value))
				{
					this.OnControlValueChanging(value);
					this.SendPropertyChanging();
					this._ControlValue = value;
					this.SendPropertyChanged("ControlValue");
					this.OnControlValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultText", DbType="NVarChar(MAX)")]
		public string DefaultText
		{
			get
			{
				return this._DefaultText;
			}
			set
			{
				if ((this._DefaultText != value))
				{
					this.OnDefaultTextChanging(value);
					this.SendPropertyChanging();
					this._DefaultText = value;
					this.SendPropertyChanged("DefaultText");
					this.OnDefaultTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinValue", DbType="NVarChar(50)")]
		public string MinValue
		{
			get
			{
				return this._MinValue;
			}
			set
			{
				if ((this._MinValue != value))
				{
					this.OnMinValueChanging(value);
					this.SendPropertyChanging();
					this._MinValue = value;
					this.SendPropertyChanged("MinValue");
					this.OnMinValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxValue", DbType="NVarChar(50)")]
		public string MaxValue
		{
			get
			{
				return this._MaxValue;
			}
			set
			{
				if ((this._MaxValue != value))
				{
					this.OnMaxValueChanging(value);
					this.SendPropertyChanging();
					this._MaxValue = value;
					this.SendPropertyChanged("MaxValue");
					this.OnMaxValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ListValues", DbType="NVarChar(MAX)")]
		public string ListValues
		{
			get
			{
				return this._ListValues;
			}
			set
			{
				if ((this._ListValues != value))
				{
					this.OnListValuesChanging(value);
					this.SendPropertyChanging();
					this._ListValues = value;
					this.SendPropertyChanged("ListValues");
					this.OnListValuesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mandatory", DbType="Bit")]
		public System.Nullable<bool> Mandatory
		{
			get
			{
				return this._Mandatory;
			}
			set
			{
				if ((this._Mandatory != value))
				{
					this.OnMandatoryChanging(value);
					this.SendPropertyChanging();
					this._Mandatory = value;
					this.SendPropertyChanged("Mandatory");
					this.OnMandatoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowIndex", DbType="Int")]
		public System.Nullable<int> RowIndex
		{
			get
			{
				return this._RowIndex;
			}
			set
			{
				if ((this._RowIndex != value))
				{
					this.OnRowIndexChanging(value);
					this.SendPropertyChanging();
					this._RowIndex = value;
					this.SendPropertyChanged("RowIndex");
					this.OnRowIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColumnIndex", DbType="Int")]
		public System.Nullable<int> ColumnIndex
		{
			get
			{
				return this._ColumnIndex;
			}
			set
			{
				if ((this._ColumnIndex != value))
				{
					this.OnColumnIndexChanging(value);
					this.SendPropertyChanging();
					this._ColumnIndex = value;
					this.SendPropertyChanged("ColumnIndex");
					this.OnColumnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ListPosition", DbType="Int")]
		public System.Nullable<int> ListPosition
		{
			get
			{
				return this._ListPosition;
			}
			set
			{
				if ((this._ListPosition != value))
				{
					this.OnListPositionChanging(value);
					this.SendPropertyChanging();
					this._ListPosition = value;
					this.SendPropertyChanged("ListPosition");
					this.OnListPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlWidth", DbType="Int")]
		public System.Nullable<int> ControlWidth
		{
			get
			{
				return this._ControlWidth;
			}
			set
			{
				if ((this._ControlWidth != value))
				{
					this.OnControlWidthChanging(value);
					this.SendPropertyChanging();
					this._ControlWidth = value;
					this.SendPropertyChanged("ControlWidth");
					this.OnControlWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlPosition", DbType="NVarChar(50)")]
		public string ControlPosition
		{
			get
			{
				return this._ControlPosition;
			}
			set
			{
				if ((this._ControlPosition != value))
				{
					this.OnControlPositionChanging(value);
					this.SendPropertyChanging();
					this._ControlPosition = value;
					this.SendPropertyChanged("ControlPosition");
					this.OnControlPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Int")]
		public System.Nullable<int> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CblPosition", DbType="VarChar(25)")]
		public string CblPosition
		{
			get
			{
				return this._CblPosition;
			}
			set
			{
				if ((this._CblPosition != value))
				{
					this.OnCblPositionChanging(value);
					this.SendPropertyChanging();
					this._CblPosition = value;
					this.SendPropertyChanged("CblPosition");
					this.OnCblPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_columnlist", DbType="VarChar(MAX)")]
		public string columnlist
		{
			get
			{
				return this._columnlist;
			}
			set
			{
				if ((this._columnlist != value))
				{
					this.OncolumnlistChanging(value);
					this.SendPropertyChanging();
					this._columnlist = value;
					this.SendPropertyChanged("columnlist");
					this.OncolumnlistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeofFieldInTbl", DbType="VarChar(50)")]
		public string TypeofFieldInTbl
		{
			get
			{
				return this._TypeofFieldInTbl;
			}
			set
			{
				if ((this._TypeofFieldInTbl != value))
				{
					this.OnTypeofFieldInTblChanging(value);
					this.SendPropertyChanging();
					this._TypeofFieldInTbl = value;
					this.SendPropertyChanged("TypeofFieldInTbl");
					this.OnTypeofFieldInTblChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Helptext", DbType="VarChar(MAX)")]
		public string Helptext
		{
			get
			{
				return this._Helptext;
			}
			set
			{
				if ((this._Helptext != value))
				{
					this.OnHelptextChanging(value);
					this.SendPropertyChanging();
					this._Helptext = value;
					this.SendPropertyChanged("Helptext");
					this.OnHelptextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HealthCheck_FormControl_HealthCheck_FormData", Storage="_HealthCheck_FormDatas", ThisKey="ControlID", OtherKey="ControlID")]
		public EntitySet<HealthCheck_FormData> HealthCheck_FormDatas
		{
			get
			{
				return this._HealthCheck_FormDatas;
			}
			set
			{
				this._HealthCheck_FormDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HealthCheck_FormControl_HealthCheck_FormData1", Storage="_HealthCheck_FormDatas1", ThisKey="ControlID", OtherKey="ControlID")]
		public EntitySet<HealthCheck_FormData> HealthCheck_FormDatas1
		{
			get
			{
				return this._HealthCheck_FormDatas1;
			}
			set
			{
				this._HealthCheck_FormDatas1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HealthCheck_FormPanel_HealthCheck_FormControl", Storage="_HealthCheck_FormPanel", ThisKey="PanelID", OtherKey="PanelID", IsForeignKey=true)]
		public HealthCheck_FormPanel HealthCheck_FormPanel
		{
			get
			{
				return this._HealthCheck_FormPanel.Entity;
			}
			set
			{
				HealthCheck_FormPanel previousValue = this._HealthCheck_FormPanel.Entity;
				if (((previousValue != value) 
							|| (this._HealthCheck_FormPanel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HealthCheck_FormPanel.Entity = null;
						previousValue.HealthCheck_FormControls.Remove(this);
					}
					this._HealthCheck_FormPanel.Entity = value;
					if ((value != null))
					{
						value.HealthCheck_FormControls.Add(this);
						this._PanelID = value.PanelID;
					}
					else
					{
						this._PanelID = default(Nullable<int>);
					}
					this.SendPropertyChanged("HealthCheck_FormPanel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HealthCheck_FormPanel_HealthCheck_FormControl1", Storage="_HealthCheck_FormPanel1", ThisKey="PanelID", OtherKey="PanelID", IsForeignKey=true)]
		public HealthCheck_FormPanel HealthCheck_FormPanel1
		{
			get
			{
				return this._HealthCheck_FormPanel1.Entity;
			}
			set
			{
				HealthCheck_FormPanel previousValue = this._HealthCheck_FormPanel1.Entity;
				if (((previousValue != value) 
							|| (this._HealthCheck_FormPanel1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HealthCheck_FormPanel1.Entity = null;
						previousValue.HealthCheck_FormControls1.Remove(this);
					}
					this._HealthCheck_FormPanel1.Entity = value;
					if ((value != null))
					{
						value.HealthCheck_FormControls1.Add(this);
						this._PanelID = value.PanelID;
					}
					else
					{
						this._PanelID = default(Nullable<int>);
					}
					this.SendPropertyChanged("HealthCheck_FormPanel1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HealthCheck_FormDatas(HealthCheck_FormData entity)
		{
			this.SendPropertyChanging();
			entity.HealthCheck_FormControl = this;
		}
		
		private void detach_HealthCheck_FormDatas(HealthCheck_FormData entity)
		{
			this.SendPropertyChanging();
			entity.HealthCheck_FormControl = null;
		}
		
		private void attach_HealthCheck_FormDatas1(HealthCheck_FormData entity)
		{
			this.SendPropertyChanging();
			entity.HealthCheck_FormControl1 = this;
		}
		
		private void detach_HealthCheck_FormDatas1(HealthCheck_FormData entity)
		{
			this.SendPropertyChanging();
			entity.HealthCheck_FormControl1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HealthCheck_Recur")]
	public partial class HealthCheck_Recur
	{
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _StartTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private System.Nullable<int> _RecurWeekOn;
		
		private string _WeekDayName;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<int> _EndAfter;
		
		private System.Nullable<int> _ReCurrencePattern;
		
		private System.Nullable<int> _ReCurrenceRange;
		
		private System.Nullable<int> _HealthCheckId;
		
		private System.Nullable<System.DateTime> _RecurrEndDate;
		
		private System.Nullable<int> _CompletedRecurr;
		
		private System.Nullable<System.DateTime> _TempDate;
		
		private string _Duration;
		
		public HealthCheck_Recur()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this._StartTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this._EndTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecurWeekOn", DbType="Int")]
		public System.Nullable<int> RecurWeekOn
		{
			get
			{
				return this._RecurWeekOn;
			}
			set
			{
				if ((this._RecurWeekOn != value))
				{
					this._RecurWeekOn = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeekDayName", DbType="VarChar(100)")]
		public string WeekDayName
		{
			get
			{
				return this._WeekDayName;
			}
			set
			{
				if ((this._WeekDayName != value))
				{
					this._WeekDayName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this._StartDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this._EndDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndAfter", DbType="Int")]
		public System.Nullable<int> EndAfter
		{
			get
			{
				return this._EndAfter;
			}
			set
			{
				if ((this._EndAfter != value))
				{
					this._EndAfter = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReCurrencePattern", DbType="Int")]
		public System.Nullable<int> ReCurrencePattern
		{
			get
			{
				return this._ReCurrencePattern;
			}
			set
			{
				if ((this._ReCurrencePattern != value))
				{
					this._ReCurrencePattern = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReCurrenceRange", DbType="Int")]
		public System.Nullable<int> ReCurrenceRange
		{
			get
			{
				return this._ReCurrenceRange;
			}
			set
			{
				if ((this._ReCurrenceRange != value))
				{
					this._ReCurrenceRange = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HealthCheckId", DbType="Int")]
		public System.Nullable<int> HealthCheckId
		{
			get
			{
				return this._HealthCheckId;
			}
			set
			{
				if ((this._HealthCheckId != value))
				{
					this._HealthCheckId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecurrEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RecurrEndDate
		{
			get
			{
				return this._RecurrEndDate;
			}
			set
			{
				if ((this._RecurrEndDate != value))
				{
					this._RecurrEndDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletedRecurr", DbType="Int")]
		public System.Nullable<int> CompletedRecurr
		{
			get
			{
				return this._CompletedRecurr;
			}
			set
			{
				if ((this._CompletedRecurr != value))
				{
					this._CompletedRecurr = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TempDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> TempDate
		{
			get
			{
				return this._TempDate;
			}
			set
			{
				if ((this._TempDate != value))
				{
					this._TempDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="NVarChar(50)")]
		public string Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this._Duration = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
