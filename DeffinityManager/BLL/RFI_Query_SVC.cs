using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.ComponentModel;
using System.Data;

namespace Deffinity.BLL
{
	/// <summary>
	/// Table RFI_Query
	/// 
	/// Generated by matricrix's C# Layer Builder
	/// 23/06/2009 17:12:11
	/// 
	/// Remark: Use this class to write custom code.
	/// </summary>
	[DataObjectAttribute]
	public class RFI_Query_SVC : RFI_Query_Base_SVC
	{
		/// <summary>
		/// Constructor
		/// </summary>
		private RFI_Query_SVC() { }
        public static DataTable FillWithSelect(int ProjectReference,string spName)
        {
            return AddSelectRow("0", "1", Fill(ProjectReference, spName), 2);
        }
        private static DataTable AddSelectRow(string col1, string col2, DataTable dt, int Select_Cap)
        {
            DataRow row = dt.NewRow();
            row[0] = "0";
            if (Select_Cap == 1)
                row[1] = "Please select...";
            else if (Select_Cap == 2)
                row[1] = "Please Select...";
            else if (Select_Cap == 3)
                row[1] = "ALL";

            dt.Rows.InsertAt(row, 0);
            return dt;
        }


        /// <summary>
        /// Fill entity list wrt subsectionType
        /// used to fill first grid in multiple grid scenario
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Fill, true)]
        public static DataTable Fill(int ProjectReference, string spName)
        {
            return Deffinity.DAL.RFI_Query_DAL.FillDropdown(ProjectReference, spName);
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static int GetVendorID(int ContractorID)
        {
            return Deffinity.DAL.RFI_Query_DAL.GetVendorID(ContractorID);
        }


	}

}
