using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.ComponentModel;
using System.Data;

namespace Deffinity.BLL
{
	/// <summary>
	/// Table RFI_SubSection
	/// 
	/// Generated by matricrix's C# Layer Builder
	/// 23/06/2009 17:12:29
	/// 
	/// Remark: Use this class to write custom code.
	/// </summary>
	[DataObjectAttribute]
	public class RFI_SubSection_SVC : RFI_SubSection_Base_SVC
	{
		/// <summary>
		/// Constructor
		/// </summary>
		private RFI_SubSection_SVC() { }
        public static DataTable FillWithSelect(int subsectionType,int projectReference)
        {
            return AddSelectRow("0", "1", Fill(subsectionType, projectReference), 2);
        }
        private static DataTable AddSelectRow(string col1, string col2, DataTable dt, int Select_Cap)
        {
            DataRow row = dt.NewRow();
            row[0] = "0";
            if (Select_Cap == 1)
                row[1] = "Please select...";
            else if (Select_Cap == 2)
                row[1] = "Please Select...";
            else if (Select_Cap == 3)
                row[1] = "ALL";

            dt.Rows.InsertAt(row, 0);
            return dt;
        }


        /// <summary>
        /// Fill entity list wrt subsectionType
        /// used to fill first grid in multiple grid scenario
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Fill, true)]
        public static DataTable Fill(int ProjectReference, string spName)
        {
            return Deffinity.DAL.RFI_SubSection_DAL.Fill(ProjectReference,spName);
        }
        /// <summary>
        /// Fill entity list wrt subsectionType
        /// used to fill first grid in multiple grid scenario
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Fill, true)]
        public static DataTable Fill(int ProjectReference, int WorkSheetID, string spName)
        {
            return Deffinity.DAL.RFI_SubSection_DAL.Fill(ProjectReference,WorkSheetID, spName);
        }

        /// <summary>
        /// Check if entity exists
        /// </summary>
        public static bool Exists(String subsectionName, int subsectionType,int projectReference)
        {
            return DAL.RFI_SubSection_DAL.Exists(subsectionName, subsectionType, projectReference);
        }
        /// <summary>
        /// Fill entity list wrt subsectionType
        /// used to fill dropdownlists
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Fill, true)]
        public static DataTable Fill(int subsectionType,int projectReference)
        {
            return DAL.RFI_SubSection_DAL.Fill(subsectionType, projectReference);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public static int Delete(int id)
        {
            return DAL.RFI_SubSection_DAL.Delete(id); 
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public static int SubDelete(int id)
        {
            return DAL.RFI_SubSection_DAL.SubDelete("Deffinity_DeleteRFIBOMTypeSubSection", id); 
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public static int TypeDelete(int id)
        {
            return DAL.RFI_SubSection_DAL.SubDelete("Deffinity_DeleteRFIBOMType",id);
        }
        
	}
}
