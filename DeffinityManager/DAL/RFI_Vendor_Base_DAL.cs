using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using SqlSrv = Microsoft.ApplicationBlocks.Data;

namespace Deffinity.DAL
{
	/// <summary>
	/// Table RFI_Vendor
	/// 
	/// Generated by matricrix's C# Layer Builder
	/// 23/06/2009 17:12:35
	/// </summary>
	public class RFI_Vendor_Base_DAL
	{

		/// <summary>
		/// Load entity
		/// </summary>
		private static BE.RFI_Vendor Load(DataRow oRow)
		{
			BE.RFI_Vendor oReturn = new BE.RFI_Vendor();
			oReturn.VENDORID = (int)oRow["VENDORID"];
			oReturn.CONTRACTORID = (int)oRow["CONTRACTORID"];
            oReturn.REGNO = (oRow["REGNO"] == DBNull.Value ? (null) : ((string)oRow["REGNO"]));
			oReturn.HQADDRESS = (oRow["HQADDRESS"] == DBNull.Value ? (null) : ((string)oRow["HQADDRESS"]));
            oReturn.VATNO = (oRow["VATNO"] == DBNull.Value ? (null) : ((string)oRow["VATNO"]));
			oReturn.ADDRESS = (oRow["ADDRESS"] == DBNull.Value ? (null) : ((string)oRow["ADDRESS"]));
			oReturn.POSTCODE = (oRow["POSTCODE"] == DBNull.Value ? (null) : ((string)oRow["POSTCODE"]));
            oReturn.CONTRACTORNAME = (oRow["VENDORNAME"] == DBNull.Value ? (null) : ((string)oRow["VENDORNAME"]));
            oReturn.LOGINAME = (oRow["VENDORLOGIN"] == DBNull.Value ? (null) : ((string)oRow["VENDORLOGIN"]));
            oReturn.COMPANY = (oRow["COMPANY"] == DBNull.Value ? (null) : ((string)oRow["COMPANY"]));
            oReturn.EMAILADDRESS = (oRow["EMAILADDRESS"] == DBNull.Value ? (null) : ((string)oRow["EMAILADDRESS"]));
            oReturn.SKILLS = (oRow["SKILLS"] == DBNull.Value ? (null) : ((string)oRow["SKILLS"]));
			return oReturn;
		}

		/// <summary>
		/// Insert entity
		/// </summary>
		public static int Insert(BE.RFI_Vendor oRFI_Vendor)
		{
			return Convert.ToInt32(SqlSrv.SqlHelper.ExecuteScalar(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_VENDOR_INSERT", oRFI_Vendor.ItemParameter()));
		}

		/// <summary>
		/// Search entity
		/// </summary>
		public static BE.RFI_Vendor Select(int vendorid)
		{
            try
            {
                DataSet dsRFI_Vendor = SqlSrv.SqlHelper.ExecuteDataset(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_VENDOR_SELECT", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@VENDORID", vendorid) });
                BE.RFI_Vendor oRFI_Vendor = null;
                if (dsRFI_Vendor.Tables[0].Rows.Count > 0)
                    oRFI_Vendor = RFI_Vendor_Base_DAL.Load(dsRFI_Vendor.Tables[0].Rows[0]);
                return oRFI_Vendor;
            }
            catch { return null; }
			
		}

		/// <summary>
		/// Check if entity exists
		/// </summary>
		public static bool Exists(int vendorid)
		{
			return Convert.ToInt32(SqlSrv.SqlHelper.ExecuteScalar(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_VENDOR_EXISTS", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@VENDORID", vendorid) })) > 0;
		}

		/// <summary>
		/// Fill entity list
		/// </summary>
		public static DataTable Fill()
		{
			DataSet dsRFI_Vendor = SqlSrv.SqlHelper.ExecuteDataset(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_VENDOR_FILL");
			return dsRFI_Vendor.Tables[0];
		}

		/// <summary>
		/// Update entity
		/// </summary>
		public static int Update(BE.RFI_Vendor oRFI_Vendor)
		{
			return SqlSrv.SqlHelper.ExecuteNonQuery(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_VENDOR_UPDATE", oRFI_Vendor.ItemParameter());
		}

		/// <summary>
		/// Delete entity record
		/// </summary>
		public static int Delete(int vendorid)
		{
			return SqlSrv.SqlHelper.ExecuteNonQuery(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_VENDOR_DELETE", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@VENDORID", vendorid) });
		}
		/// <summary>
		/// Delete entity ALL records
		/// </summary>
		public static int DeleteAll()
		{
			return SqlSrv.SqlHelper.ExecuteNonQuery(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_VENDOR_DELETEALL");
		}
	}
}
