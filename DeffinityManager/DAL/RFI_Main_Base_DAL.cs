using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using SqlSrv = Microsoft.ApplicationBlocks.Data;

namespace Deffinity.DAL
{
	/// <summary>
	/// Table RFI_Main
	/// 
	/// Generated by matricrix's C# Layer Builder
	/// 23/06/2009 17:12:02
	/// </summary>
	public class RFI_Main_Base_DAL
	{

		/// <summary>
		/// Load entity
		/// </summary>
		private static BE.RFI_Main Load(DataRow oRow)
		{
			BE.RFI_Main oReturn = new BE.RFI_Main();
			oReturn.RFI_ID = (int)oRow["RFI_ID"];
			oReturn.PROJECTREFERENCE = (int)oRow["PROJECTREFERENCE"];
			oReturn.RFISTATUS = (int)oRow["RFISTATUS"];
			oReturn.TITLE = (string)oRow["TITLE"];
			oReturn.DESCRIPTION = (oRow["DESCRIPTION"] == DBNull.Value ? (null) : ((string)oRow["DESCRIPTION"]));
			oReturn.OWNER = (oRow["OWNER"] == DBNull.Value ? (null) : ((int?)oRow["OWNER"]));
			oReturn.OWNEREMAIL = (oRow["OWNEREMAIL"] == DBNull.Value ? (null) : ((string)oRow["OWNEREMAIL"]));
			oReturn.OWNERTEL = (oRow["OWNERTEL"] == DBNull.Value ? (null) : ((string)oRow["OWNERTEL"]));
			oReturn.EXPECTEDPROJECTSTARTDATE = (DateTime)oRow["EXPECTEDPROJECTSTARTDATE"];
			oReturn.EXPECTEDPROJECTDUEDATE = (DateTime)oRow["EXPECTEDPROJECTDUEDATE"];
			oReturn.QUERIESDEADLINEDATE = (oRow["QUERIESDEADLINEDATE"] == DBNull.Value ? (null) : ((DateTime?)oRow["QUERIESDEADLINEDATE"]));
			oReturn.QUERIESDEADLINETIME = (oRow["QUERIESDEADLINETIME"] == DBNull.Value ? (null) : ((string)oRow["QUERIESDEADLINETIME"]));
			oReturn.SUBMISSIONDEADLINEDATE = (oRow["SUBMISSIONDEADLINEDATE"] == DBNull.Value ? (null) : ((DateTime?)oRow["SUBMISSIONDEADLINEDATE"]));
			oReturn.SUBMISSIONDEADLINETIME = (oRow["SUBMISSIONDEADLINETIME"] == DBNull.Value ? (null) : ((string)oRow["SUBMISSIONDEADLINETIME"]));
			oReturn.DECISIONDATE = (oRow["DECISIONDATE"] == DBNull.Value ? (null) : ((DateTime?)oRow["DECISIONDATE"]));
			oReturn.SITEID = (oRow["SITEID"] == DBNull.Value ? (null) : ((int?)oRow["SITEID"]));
			oReturn.PORTFOLIOID = (oRow["PORTFOLIOID"] == DBNull.Value ? (null) : ((int?)oRow["PORTFOLIOID"]));
			return oReturn;
		}

		/// <summary>
		/// Insert entity
		/// </summary>
		public static int Insert(BE.RFI_Main oRFI_Main)
		{
			 return Convert.ToInt32(SqlSrv.SqlHelper.ExecuteScalar(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_MAIN_INSERT", oRFI_Main.ItemParameter()));
              
            //SqlSrv.SqlHelperParameterCache.CacheParameterSet();
            //System.Data.SqlClient.SqlParameter[] param= SqlSrv.SqlHelperParameterCache.GetSpParameterSet(Connection.ConnectionString, "dbo.DEFFINITY_RFI_MAIN_INSERT", true);
            //return  Convert.ToInt32(param[16].Value);            
		}

		/// <summary>
		/// Search entity
		/// </summary>
        public static BE.RFI_Main Select(int projectref)
		{
            DataSet dsRFI_Main = SqlSrv.SqlHelper.ExecuteDataset(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_MAIN_SELECT", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@PROJECTREFERENCE", projectref) });
			BE.RFI_Main oRFI_Main = null;
			if (dsRFI_Main.Tables[0].Rows.Count > 0)
				oRFI_Main = RFI_Main_Base_DAL.Load(dsRFI_Main.Tables[0].Rows[0]);
			return oRFI_Main;
		}

		/// <summary>
		/// Check if entity exists
		/// </summary>
		public static bool Exists(int rfi_id)
		{
			return Convert.ToInt32(SqlSrv.SqlHelper.ExecuteScalar(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_MAIN_EXISTS", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@RFI_ID", rfi_id) })) > 0;
		}
        public static bool Exists(string rfi_title)
        {
            return Convert.ToInt32(SqlSrv.SqlHelper.ExecuteScalar(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_MAIN_EXISTS_TITLE", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@RFI_TITLE", rfi_title) })) > 0;
        }

		/// <summary>
		/// Fill entity list
		/// </summary>
		public static DataTable Fill()
		{
			DataSet dsRFI_Main = SqlSrv.SqlHelper.ExecuteDataset(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_MAIN_FILL");
			return dsRFI_Main.Tables[0];
		}

		/// <summary>
		/// Update entity
		/// </summary>
		public static int Update(BE.RFI_Main oRFI_Main)
		{
			return SqlSrv.SqlHelper.ExecuteNonQuery(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_MAIN_UPDATE", oRFI_Main.ItemParameter());
		}

		/// <summary>
		/// Delete entity record
		/// </summary>
		public static int Delete(int rfi_id)
		{
			return SqlSrv.SqlHelper.ExecuteNonQuery(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_MAIN_DELETE", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@RFI_ID", rfi_id) });
		}
		/// <summary>
		/// Delete entity ALL records
		/// </summary>
		public static int DeleteAll()
		{
			return SqlSrv.SqlHelper.ExecuteNonQuery(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_MAIN_DELETEALL");
		}
        public static DataSet SelectProject(int projectreference)
        {
           // DataSet ds = new DataSet();
           return  SqlSrv.SqlHelper.ExecuteDataset(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_MAIN_SELECTPROJECT", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@PROJECTREFERENCE", projectreference) });
        }
        public static DataSet GetOwnerDetails(int ProjectReference)
        {
            return SqlSrv.SqlHelper.ExecuteDataset(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_GETOWNERDETAILS", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@PROJECTREFERENCE", ProjectReference) });
        }
	}
}
