#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChangeControlMgt.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DeffinityEflair")]
	public partial class ChangeControlDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertChangeControl(ChangeControlMgt.Entity.ChangeControl instance);
    partial void UpdateChangeControl(ChangeControlMgt.Entity.ChangeControl instance);
    partial void DeleteChangeControl(ChangeControlMgt.Entity.ChangeControl instance);
    partial void InsertChangeControl_Risk(ChangeControlMgt.Entity.ChangeControl_Risk instance);
    partial void UpdateChangeControl_Risk(ChangeControlMgt.Entity.ChangeControl_Risk instance);
    partial void DeleteChangeControl_Risk(ChangeControlMgt.Entity.ChangeControl_Risk instance);
    partial void InsertChangeControl_Task(ChangeControlMgt.Entity.ChangeControl_Task instance);
    partial void UpdateChangeControl_Task(ChangeControlMgt.Entity.ChangeControl_Task instance);
    partial void DeleteChangeControl_Task(ChangeControlMgt.Entity.ChangeControl_Task instance);
    partial void InsertChangeControlAdmin(ChangeControlMgt.Entity.ChangeControlAdmin instance);
    partial void UpdateChangeControlAdmin(ChangeControlMgt.Entity.ChangeControlAdmin instance);
    partial void DeleteChangeControlAdmin(ChangeControlMgt.Entity.ChangeControlAdmin instance);
    partial void InsertChangeControl_Approval(ChangeControlMgt.Entity.ChangeControl_Approval instance);
    partial void UpdateChangeControl_Approval(ChangeControlMgt.Entity.ChangeControl_Approval instance);
    partial void DeleteChangeControl_Approval(ChangeControlMgt.Entity.ChangeControl_Approval instance);
    #endregion
		
		public ChangeControlDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DBstring"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ChangeControlDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ChangeControlDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ChangeControlDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ChangeControlDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ChangeControlMgt.Entity.ChangeControl> ChangeControls
		{
			get
			{
				return this.GetTable<ChangeControlMgt.Entity.ChangeControl>();
			}
		}
		
		public System.Data.Linq.Table<ChangeControlMgt.Entity.ChangeControl_Risk> ChangeControl_Risks
		{
			get
			{
				return this.GetTable<ChangeControlMgt.Entity.ChangeControl_Risk>();
			}
		}
		
		public System.Data.Linq.Table<ChangeControlMgt.Entity.ChangeControl_Task> ChangeControl_Tasks
		{
			get
			{
				return this.GetTable<ChangeControlMgt.Entity.ChangeControl_Task>();
			}
		}
		
		public System.Data.Linq.Table<ChangeControlMgt.Entity.ChangeControlAdmin> ChangeControlAdmins
		{
			get
			{
				return this.GetTable<ChangeControlMgt.Entity.ChangeControlAdmin>();
			}
		}
		
		public System.Data.Linq.Table<ChangeControlMgt.Entity.ChangeControl_Approval> ChangeControl_Approvals
		{
			get
			{
				return this.GetTable<ChangeControlMgt.Entity.ChangeControl_Approval>();
			}
		}
	}
}
namespace ChangeControlMgt.Entity
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChangeControl")]
	public partial class ChangeControl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _IncidentID;
		
		private string _Title;
		
		private string _ChangeDescription;
		
		private string _Justification;
		
		private System.Nullable<System.DateTime> _DateRaised;
		
		private System.Nullable<System.DateTime> _TargetReleaseDate;
		
		private string _ResourceImpact;
		
		private string _RequesterName;
		
		private string _RequesterEmailID;
		
		private System.Nullable<int> _PortfolioID;
		
		private System.Nullable<int> _CategoryID;
		
		private string _Status;
		
		private System.Nullable<System.DateTime> _TargetStartDate;
		
		private System.Nullable<int> _RaisedBy;
		
		private System.Nullable<int> _RelatesToProjectRef;
		
		private System.Nullable<int> _RelatesToServiceRequest;
		
		private string _EstimatedCost;
		
		private string _EstimatedDaysRequired;
		
		private System.Nullable<int> _RequesterID;
		
		private System.Nullable<int> _CoOrdinator;
		
		private System.Nullable<int> _SubCategoryID;
		
		private System.Nullable<System.DateTime> _DateLogged;
		
		private System.Nullable<System.DateTime> _InHandTime;
		
		private System.Nullable<System.DateTime> _ClosedTime;
		
		private System.Nullable<bool> _InHandSLAMet;
		
		private System.Nullable<bool> _ClosedSLAMet;
		
		private System.Nullable<int> _AreaID;
		
		private System.Nullable<int> _PriorityID;
		
		private System.Nullable<int> _SiteID;
		
		private EntitySet<ChangeControl_Risk> _ChangeControl_Risks;
		
		private EntitySet<ChangeControl_Task> _ChangeControl_Tasks;
		
		private EntitySet<ChangeControl_Approval> _ChangeControl_Approvals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIncidentIDChanging(System.Nullable<int> value);
    partial void OnIncidentIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnChangeDescriptionChanging(string value);
    partial void OnChangeDescriptionChanged();
    partial void OnJustificationChanging(string value);
    partial void OnJustificationChanged();
    partial void OnDateRaisedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateRaisedChanged();
    partial void OnTargetReleaseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTargetReleaseDateChanged();
    partial void OnResourceImpactChanging(string value);
    partial void OnResourceImpactChanged();
    partial void OnRequesterNameChanging(string value);
    partial void OnRequesterNameChanged();
    partial void OnRequesterEmailIDChanging(string value);
    partial void OnRequesterEmailIDChanged();
    partial void OnPortfolioIDChanging(System.Nullable<int> value);
    partial void OnPortfolioIDChanged();
    partial void OnCategoryIDChanging(System.Nullable<int> value);
    partial void OnCategoryIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnTargetStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTargetStartDateChanged();
    partial void OnRaisedByChanging(System.Nullable<int> value);
    partial void OnRaisedByChanged();
    partial void OnRelatesToProjectRefChanging(System.Nullable<int> value);
    partial void OnRelatesToProjectRefChanged();
    partial void OnRelatesToServiceRequestChanging(System.Nullable<int> value);
    partial void OnRelatesToServiceRequestChanged();
    partial void OnEstimatedCostChanging(string value);
    partial void OnEstimatedCostChanged();
    partial void OnEstimatedDaysRequiredChanging(string value);
    partial void OnEstimatedDaysRequiredChanged();
    partial void OnRequesterIDChanging(System.Nullable<int> value);
    partial void OnRequesterIDChanged();
    partial void OnCoOrdinatorChanging(System.Nullable<int> value);
    partial void OnCoOrdinatorChanged();
    partial void OnSubCategoryIDChanging(System.Nullable<int> value);
    partial void OnSubCategoryIDChanged();
    partial void OnDateLoggedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateLoggedChanged();
    partial void OnInHandTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnInHandTimeChanged();
    partial void OnClosedTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnClosedTimeChanged();
    partial void OnInHandSLAMetChanging(System.Nullable<bool> value);
    partial void OnInHandSLAMetChanged();
    partial void OnClosedSLAMetChanging(System.Nullable<bool> value);
    partial void OnClosedSLAMetChanged();
    partial void OnAreaIDChanging(System.Nullable<int> value);
    partial void OnAreaIDChanged();
    partial void OnPriorityIDChanging(System.Nullable<int> value);
    partial void OnPriorityIDChanged();
    partial void OnSiteIDChanging(System.Nullable<int> value);
    partial void OnSiteIDChanged();
    #endregion
		
		public ChangeControl()
		{
			this._ChangeControl_Risks = new EntitySet<ChangeControl_Risk>(new Action<ChangeControl_Risk>(this.attach_ChangeControl_Risks), new Action<ChangeControl_Risk>(this.detach_ChangeControl_Risks));
			this._ChangeControl_Tasks = new EntitySet<ChangeControl_Task>(new Action<ChangeControl_Task>(this.attach_ChangeControl_Tasks), new Action<ChangeControl_Task>(this.detach_ChangeControl_Tasks));
			this._ChangeControl_Approvals = new EntitySet<ChangeControl_Approval>(new Action<ChangeControl_Approval>(this.attach_ChangeControl_Approvals), new Action<ChangeControl_Approval>(this.detach_ChangeControl_Approvals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncidentID", DbType="Int")]
		public System.Nullable<int> IncidentID
		{
			get
			{
				return this._IncidentID;
			}
			set
			{
				if ((this._IncidentID != value))
				{
					this.OnIncidentIDChanging(value);
					this.SendPropertyChanging();
					this._IncidentID = value;
					this.SendPropertyChanged("IncidentID");
					this.OnIncidentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(200)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeDescription", DbType="VarChar(MAX)")]
		public string ChangeDescription
		{
			get
			{
				return this._ChangeDescription;
			}
			set
			{
				if ((this._ChangeDescription != value))
				{
					this.OnChangeDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ChangeDescription = value;
					this.SendPropertyChanged("ChangeDescription");
					this.OnChangeDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Justification", DbType="VarChar(MAX)")]
		public string Justification
		{
			get
			{
				return this._Justification;
			}
			set
			{
				if ((this._Justification != value))
				{
					this.OnJustificationChanging(value);
					this.SendPropertyChanging();
					this._Justification = value;
					this.SendPropertyChanged("Justification");
					this.OnJustificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateRaised", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> DateRaised
		{
			get
			{
				return this._DateRaised;
			}
			set
			{
				if ((this._DateRaised != value))
				{
					this.OnDateRaisedChanging(value);
					this.SendPropertyChanging();
					this._DateRaised = value;
					this.SendPropertyChanged("DateRaised");
					this.OnDateRaisedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetReleaseDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> TargetReleaseDate
		{
			get
			{
				return this._TargetReleaseDate;
			}
			set
			{
				if ((this._TargetReleaseDate != value))
				{
					this.OnTargetReleaseDateChanging(value);
					this.SendPropertyChanging();
					this._TargetReleaseDate = value;
					this.SendPropertyChanged("TargetReleaseDate");
					this.OnTargetReleaseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceImpact", DbType="VarChar(MAX)")]
		public string ResourceImpact
		{
			get
			{
				return this._ResourceImpact;
			}
			set
			{
				if ((this._ResourceImpact != value))
				{
					this.OnResourceImpactChanging(value);
					this.SendPropertyChanging();
					this._ResourceImpact = value;
					this.SendPropertyChanged("ResourceImpact");
					this.OnResourceImpactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequesterName", DbType="VarChar(100)")]
		public string RequesterName
		{
			get
			{
				return this._RequesterName;
			}
			set
			{
				if ((this._RequesterName != value))
				{
					this.OnRequesterNameChanging(value);
					this.SendPropertyChanging();
					this._RequesterName = value;
					this.SendPropertyChanged("RequesterName");
					this.OnRequesterNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequesterEmailID", DbType="VarChar(100)")]
		public string RequesterEmailID
		{
			get
			{
				return this._RequesterEmailID;
			}
			set
			{
				if ((this._RequesterEmailID != value))
				{
					this.OnRequesterEmailIDChanging(value);
					this.SendPropertyChanging();
					this._RequesterEmailID = value;
					this.SendPropertyChanged("RequesterEmailID");
					this.OnRequesterEmailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PortfolioID", DbType="Int")]
		public System.Nullable<int> PortfolioID
		{
			get
			{
				return this._PortfolioID;
			}
			set
			{
				if ((this._PortfolioID != value))
				{
					this.OnPortfolioIDChanging(value);
					this.SendPropertyChanging();
					this._PortfolioID = value;
					this.SendPropertyChanged("PortfolioID");
					this.OnPortfolioIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int")]
		public System.Nullable<int> CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(20)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetStartDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> TargetStartDate
		{
			get
			{
				return this._TargetStartDate;
			}
			set
			{
				if ((this._TargetStartDate != value))
				{
					this.OnTargetStartDateChanging(value);
					this.SendPropertyChanging();
					this._TargetStartDate = value;
					this.SendPropertyChanged("TargetStartDate");
					this.OnTargetStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaisedBy", DbType="Int")]
		public System.Nullable<int> RaisedBy
		{
			get
			{
				return this._RaisedBy;
			}
			set
			{
				if ((this._RaisedBy != value))
				{
					this.OnRaisedByChanging(value);
					this.SendPropertyChanging();
					this._RaisedBy = value;
					this.SendPropertyChanged("RaisedBy");
					this.OnRaisedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelatesToProjectRef", DbType="Int")]
		public System.Nullable<int> RelatesToProjectRef
		{
			get
			{
				return this._RelatesToProjectRef;
			}
			set
			{
				if ((this._RelatesToProjectRef != value))
				{
					this.OnRelatesToProjectRefChanging(value);
					this.SendPropertyChanging();
					this._RelatesToProjectRef = value;
					this.SendPropertyChanged("RelatesToProjectRef");
					this.OnRelatesToProjectRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelatesToServiceRequest", DbType="Int")]
		public System.Nullable<int> RelatesToServiceRequest
		{
			get
			{
				return this._RelatesToServiceRequest;
			}
			set
			{
				if ((this._RelatesToServiceRequest != value))
				{
					this.OnRelatesToServiceRequestChanging(value);
					this.SendPropertyChanging();
					this._RelatesToServiceRequest = value;
					this.SendPropertyChanged("RelatesToServiceRequest");
					this.OnRelatesToServiceRequestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstimatedCost", DbType="NVarChar(50)")]
		public string EstimatedCost
		{
			get
			{
				return this._EstimatedCost;
			}
			set
			{
				if ((this._EstimatedCost != value))
				{
					this.OnEstimatedCostChanging(value);
					this.SendPropertyChanging();
					this._EstimatedCost = value;
					this.SendPropertyChanged("EstimatedCost");
					this.OnEstimatedCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstimatedDaysRequired", DbType="NVarChar(50)")]
		public string EstimatedDaysRequired
		{
			get
			{
				return this._EstimatedDaysRequired;
			}
			set
			{
				if ((this._EstimatedDaysRequired != value))
				{
					this.OnEstimatedDaysRequiredChanging(value);
					this.SendPropertyChanging();
					this._EstimatedDaysRequired = value;
					this.SendPropertyChanged("EstimatedDaysRequired");
					this.OnEstimatedDaysRequiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequesterID", DbType="Int")]
		public System.Nullable<int> RequesterID
		{
			get
			{
				return this._RequesterID;
			}
			set
			{
				if ((this._RequesterID != value))
				{
					this.OnRequesterIDChanging(value);
					this.SendPropertyChanging();
					this._RequesterID = value;
					this.SendPropertyChanged("RequesterID");
					this.OnRequesterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoOrdinator", DbType="Int")]
		public System.Nullable<int> CoOrdinator
		{
			get
			{
				return this._CoOrdinator;
			}
			set
			{
				if ((this._CoOrdinator != value))
				{
					this.OnCoOrdinatorChanging(value);
					this.SendPropertyChanging();
					this._CoOrdinator = value;
					this.SendPropertyChanged("CoOrdinator");
					this.OnCoOrdinatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCategoryID", DbType="Int")]
		public System.Nullable<int> SubCategoryID
		{
			get
			{
				return this._SubCategoryID;
			}
			set
			{
				if ((this._SubCategoryID != value))
				{
					this.OnSubCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._SubCategoryID = value;
					this.SendPropertyChanged("SubCategoryID");
					this.OnSubCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateLogged", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateLogged
		{
			get
			{
				return this._DateLogged;
			}
			set
			{
				if ((this._DateLogged != value))
				{
					this.OnDateLoggedChanging(value);
					this.SendPropertyChanging();
					this._DateLogged = value;
					this.SendPropertyChanged("DateLogged");
					this.OnDateLoggedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InHandTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> InHandTime
		{
			get
			{
				return this._InHandTime;
			}
			set
			{
				if ((this._InHandTime != value))
				{
					this.OnInHandTimeChanging(value);
					this.SendPropertyChanging();
					this._InHandTime = value;
					this.SendPropertyChanged("InHandTime");
					this.OnInHandTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosedTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ClosedTime
		{
			get
			{
				return this._ClosedTime;
			}
			set
			{
				if ((this._ClosedTime != value))
				{
					this.OnClosedTimeChanging(value);
					this.SendPropertyChanging();
					this._ClosedTime = value;
					this.SendPropertyChanged("ClosedTime");
					this.OnClosedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InHandSLAMet", DbType="Bit")]
		public System.Nullable<bool> InHandSLAMet
		{
			get
			{
				return this._InHandSLAMet;
			}
			set
			{
				if ((this._InHandSLAMet != value))
				{
					this.OnInHandSLAMetChanging(value);
					this.SendPropertyChanging();
					this._InHandSLAMet = value;
					this.SendPropertyChanged("InHandSLAMet");
					this.OnInHandSLAMetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosedSLAMet", DbType="Bit")]
		public System.Nullable<bool> ClosedSLAMet
		{
			get
			{
				return this._ClosedSLAMet;
			}
			set
			{
				if ((this._ClosedSLAMet != value))
				{
					this.OnClosedSLAMetChanging(value);
					this.SendPropertyChanging();
					this._ClosedSLAMet = value;
					this.SendPropertyChanged("ClosedSLAMet");
					this.OnClosedSLAMetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaID", DbType="Int")]
		public System.Nullable<int> AreaID
		{
			get
			{
				return this._AreaID;
			}
			set
			{
				if ((this._AreaID != value))
				{
					this.OnAreaIDChanging(value);
					this.SendPropertyChanging();
					this._AreaID = value;
					this.SendPropertyChanged("AreaID");
					this.OnAreaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriorityID", DbType="Int")]
		public System.Nullable<int> PriorityID
		{
			get
			{
				return this._PriorityID;
			}
			set
			{
				if ((this._PriorityID != value))
				{
					this.OnPriorityIDChanging(value);
					this.SendPropertyChanging();
					this._PriorityID = value;
					this.SendPropertyChanged("PriorityID");
					this.OnPriorityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteID", DbType="Int")]
		public System.Nullable<int> SiteID
		{
			get
			{
				return this._SiteID;
			}
			set
			{
				if ((this._SiteID != value))
				{
					this.OnSiteIDChanging(value);
					this.SendPropertyChanging();
					this._SiteID = value;
					this.SendPropertyChanged("SiteID");
					this.OnSiteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeControl_ChangeControl_Risk", Storage="_ChangeControl_Risks", ThisKey="ID", OtherKey="ChangeControlID")]
		public EntitySet<ChangeControl_Risk> ChangeControl_Risks
		{
			get
			{
				return this._ChangeControl_Risks;
			}
			set
			{
				this._ChangeControl_Risks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeControl_ChangeControl_Task", Storage="_ChangeControl_Tasks", ThisKey="ID", OtherKey="ChangeControlID")]
		public EntitySet<ChangeControl_Task> ChangeControl_Tasks
		{
			get
			{
				return this._ChangeControl_Tasks;
			}
			set
			{
				this._ChangeControl_Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeControl_ChangeControl_Approval", Storage="_ChangeControl_Approvals", ThisKey="ID", OtherKey="ChangeControlID")]
		public EntitySet<ChangeControl_Approval> ChangeControl_Approvals
		{
			get
			{
				return this._ChangeControl_Approvals;
			}
			set
			{
				this._ChangeControl_Approvals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChangeControl_Risks(ChangeControl_Risk entity)
		{
			this.SendPropertyChanging();
			entity.ChangeControl = this;
		}
		
		private void detach_ChangeControl_Risks(ChangeControl_Risk entity)
		{
			this.SendPropertyChanging();
			entity.ChangeControl = null;
		}
		
		private void attach_ChangeControl_Tasks(ChangeControl_Task entity)
		{
			this.SendPropertyChanging();
			entity.ChangeControl = this;
		}
		
		private void detach_ChangeControl_Tasks(ChangeControl_Task entity)
		{
			this.SendPropertyChanging();
			entity.ChangeControl = null;
		}
		
		private void attach_ChangeControl_Approvals(ChangeControl_Approval entity)
		{
			this.SendPropertyChanging();
			entity.ChangeControl = this;
		}
		
		private void detach_ChangeControl_Approvals(ChangeControl_Approval entity)
		{
			this.SendPropertyChanging();
			entity.ChangeControl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChangeControl_Risk")]
	public partial class ChangeControl_Risk : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ChangeControlID;
		
		private string _Risk;
		
		private bool _RollBackPlan;
		
		private System.Nullable<bool> _TestPlan;
		
		private System.Nullable<int> _AssignedTo;
		
		private EntityRef<ChangeControl> _ChangeControl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnChangeControlIDChanging(System.Nullable<int> value);
    partial void OnChangeControlIDChanged();
    partial void OnRiskChanging(string value);
    partial void OnRiskChanged();
    partial void OnRollBackPlanChanging(bool value);
    partial void OnRollBackPlanChanged();
    partial void OnTestPlanChanging(System.Nullable<bool> value);
    partial void OnTestPlanChanged();
    partial void OnAssignedToChanging(System.Nullable<int> value);
    partial void OnAssignedToChanged();
    #endregion
		
		public ChangeControl_Risk()
		{
			this._ChangeControl = default(EntityRef<ChangeControl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeControlID", DbType="Int")]
		public System.Nullable<int> ChangeControlID
		{
			get
			{
				return this._ChangeControlID;
			}
			set
			{
				if ((this._ChangeControlID != value))
				{
					if (this._ChangeControl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChangeControlIDChanging(value);
					this.SendPropertyChanging();
					this._ChangeControlID = value;
					this.SendPropertyChanged("ChangeControlID");
					this.OnChangeControlIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Risk", DbType="VarChar(MAX)")]
		public string Risk
		{
			get
			{
				return this._Risk;
			}
			set
			{
				if ((this._Risk != value))
				{
					this.OnRiskChanging(value);
					this.SendPropertyChanging();
					this._Risk = value;
					this.SendPropertyChanged("Risk");
					this.OnRiskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RollBackPlan", DbType="Bit NOT NULL")]
		public bool RollBackPlan
		{
			get
			{
				return this._RollBackPlan;
			}
			set
			{
				if ((this._RollBackPlan != value))
				{
					this.OnRollBackPlanChanging(value);
					this.SendPropertyChanging();
					this._RollBackPlan = value;
					this.SendPropertyChanged("RollBackPlan");
					this.OnRollBackPlanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestPlan", DbType="Bit")]
		public System.Nullable<bool> TestPlan
		{
			get
			{
				return this._TestPlan;
			}
			set
			{
				if ((this._TestPlan != value))
				{
					this.OnTestPlanChanging(value);
					this.SendPropertyChanging();
					this._TestPlan = value;
					this.SendPropertyChanged("TestPlan");
					this.OnTestPlanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignedTo", DbType="Int")]
		public System.Nullable<int> AssignedTo
		{
			get
			{
				return this._AssignedTo;
			}
			set
			{
				if ((this._AssignedTo != value))
				{
					this.OnAssignedToChanging(value);
					this.SendPropertyChanging();
					this._AssignedTo = value;
					this.SendPropertyChanged("AssignedTo");
					this.OnAssignedToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeControl_ChangeControl_Risk", Storage="_ChangeControl", ThisKey="ChangeControlID", OtherKey="ID", IsForeignKey=true)]
		public ChangeControl ChangeControl
		{
			get
			{
				return this._ChangeControl.Entity;
			}
			set
			{
				ChangeControl previousValue = this._ChangeControl.Entity;
				if (((previousValue != value) 
							|| (this._ChangeControl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChangeControl.Entity = null;
						previousValue.ChangeControl_Risks.Remove(this);
					}
					this._ChangeControl.Entity = value;
					if ((value != null))
					{
						value.ChangeControl_Risks.Add(this);
						this._ChangeControlID = value.ID;
					}
					else
					{
						this._ChangeControlID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ChangeControl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChangeControl_Task")]
	public partial class ChangeControl_Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ChangeControlID;
		
		private string _Task;
		
		private System.Nullable<System.DateTime> _OriginalDate;
		
		private System.Nullable<System.DateTime> _NewDate;
		
		private string _Change;
		
		private EntityRef<ChangeControl> _ChangeControl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnChangeControlIDChanging(System.Nullable<int> value);
    partial void OnChangeControlIDChanged();
    partial void OnTaskChanging(string value);
    partial void OnTaskChanged();
    partial void OnOriginalDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOriginalDateChanged();
    partial void OnNewDateChanging(System.Nullable<System.DateTime> value);
    partial void OnNewDateChanged();
    partial void OnChangeChanging(string value);
    partial void OnChangeChanged();
    #endregion
		
		public ChangeControl_Task()
		{
			this._ChangeControl = default(EntityRef<ChangeControl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeControlID", DbType="Int")]
		public System.Nullable<int> ChangeControlID
		{
			get
			{
				return this._ChangeControlID;
			}
			set
			{
				if ((this._ChangeControlID != value))
				{
					if (this._ChangeControl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChangeControlIDChanging(value);
					this.SendPropertyChanging();
					this._ChangeControlID = value;
					this.SendPropertyChanged("ChangeControlID");
					this.OnChangeControlIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Task", DbType="VarChar(200)")]
		public string Task
		{
			get
			{
				return this._Task;
			}
			set
			{
				if ((this._Task != value))
				{
					this.OnTaskChanging(value);
					this.SendPropertyChanging();
					this._Task = value;
					this.SendPropertyChanged("Task");
					this.OnTaskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> OriginalDate
		{
			get
			{
				return this._OriginalDate;
			}
			set
			{
				if ((this._OriginalDate != value))
				{
					this.OnOriginalDateChanging(value);
					this.SendPropertyChanging();
					this._OriginalDate = value;
					this.SendPropertyChanged("OriginalDate");
					this.OnOriginalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> NewDate
		{
			get
			{
				return this._NewDate;
			}
			set
			{
				if ((this._NewDate != value))
				{
					this.OnNewDateChanging(value);
					this.SendPropertyChanging();
					this._NewDate = value;
					this.SendPropertyChanged("NewDate");
					this.OnNewDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Change", DbType="VarChar(MAX)")]
		public string Change
		{
			get
			{
				return this._Change;
			}
			set
			{
				if ((this._Change != value))
				{
					this.OnChangeChanging(value);
					this.SendPropertyChanging();
					this._Change = value;
					this.SendPropertyChanged("Change");
					this.OnChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeControl_ChangeControl_Task", Storage="_ChangeControl", ThisKey="ChangeControlID", OtherKey="ID", IsForeignKey=true)]
		public ChangeControl ChangeControl
		{
			get
			{
				return this._ChangeControl.Entity;
			}
			set
			{
				ChangeControl previousValue = this._ChangeControl.Entity;
				if (((previousValue != value) 
							|| (this._ChangeControl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChangeControl.Entity = null;
						previousValue.ChangeControl_Tasks.Remove(this);
					}
					this._ChangeControl.Entity = value;
					if ((value != null))
					{
						value.ChangeControl_Tasks.Add(this);
						this._ChangeControlID = value.ID;
					}
					else
					{
						this._ChangeControlID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ChangeControl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChangeControlAdmin")]
	public partial class ChangeControlAdmin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public ChangeControlAdmin()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChangeControl_Approval")]
	public partial class ChangeControl_Approval : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ChangeControlID;
		
		private string _Title;
		
		private System.Nullable<int> _ApprovalID;
		
		private string _Comments;
		
		private System.Nullable<bool> _Approved;
		
		private System.Nullable<System.DateTime> _DateApproved;
		
		private System.Nullable<bool> _isActive;
		
		private EntityRef<ChangeControl> _ChangeControl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnChangeControlIDChanging(System.Nullable<int> value);
    partial void OnChangeControlIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnApprovalIDChanging(System.Nullable<int> value);
    partial void OnApprovalIDChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnApprovedChanging(System.Nullable<bool> value);
    partial void OnApprovedChanged();
    partial void OnDateApprovedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateApprovedChanged();
    partial void OnisActiveChanging(System.Nullable<bool> value);
    partial void OnisActiveChanged();
    #endregion
		
		public ChangeControl_Approval()
		{
			this._ChangeControl = default(EntityRef<ChangeControl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeControlID", DbType="Int")]
		public System.Nullable<int> ChangeControlID
		{
			get
			{
				return this._ChangeControlID;
			}
			set
			{
				if ((this._ChangeControlID != value))
				{
					if (this._ChangeControl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChangeControlIDChanging(value);
					this.SendPropertyChanging();
					this._ChangeControlID = value;
					this.SendPropertyChanged("ChangeControlID");
					this.OnChangeControlIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(200)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovalID", DbType="Int")]
		public System.Nullable<int> ApprovalID
		{
			get
			{
				return this._ApprovalID;
			}
			set
			{
				if ((this._ApprovalID != value))
				{
					this.OnApprovalIDChanging(value);
					this.SendPropertyChanging();
					this._ApprovalID = value;
					this.SendPropertyChanged("ApprovalID");
					this.OnApprovalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(MAX)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Approved", DbType="Bit")]
		public System.Nullable<bool> Approved
		{
			get
			{
				return this._Approved;
			}
			set
			{
				if ((this._Approved != value))
				{
					this.OnApprovedChanging(value);
					this.SendPropertyChanging();
					this._Approved = value;
					this.SendPropertyChanged("Approved");
					this.OnApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateApproved", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> DateApproved
		{
			get
			{
				return this._DateApproved;
			}
			set
			{
				if ((this._DateApproved != value))
				{
					this.OnDateApprovedChanging(value);
					this.SendPropertyChanging();
					this._DateApproved = value;
					this.SendPropertyChanged("DateApproved");
					this.OnDateApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit")]
		public System.Nullable<bool> isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeControl_ChangeControl_Approval", Storage="_ChangeControl", ThisKey="ChangeControlID", OtherKey="ID", IsForeignKey=true)]
		public ChangeControl ChangeControl
		{
			get
			{
				return this._ChangeControl.Entity;
			}
			set
			{
				ChangeControl previousValue = this._ChangeControl.Entity;
				if (((previousValue != value) 
							|| (this._ChangeControl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChangeControl.Entity = null;
						previousValue.ChangeControl_Approvals.Remove(this);
					}
					this._ChangeControl.Entity = value;
					if ((value != null))
					{
						value.ChangeControl_Approvals.Add(this);
						this._ChangeControlID = value.ID;
					}
					else
					{
						this._ChangeControlID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ChangeControl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
