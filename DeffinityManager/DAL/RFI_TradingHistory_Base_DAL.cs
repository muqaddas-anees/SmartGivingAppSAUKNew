using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using SqlSrv = Microsoft.ApplicationBlocks.Data;

namespace Deffinity.DAL
{
	/// <summary>
	/// Table RFI_TradingHistory
	/// 
	/// Generated by matricrix's C# Layer Builder
	/// 23/06/2009 17:12:32
	/// </summary>
	public class RFI_TradingHistory_Base_DAL
	{

		/// <summary>
		/// Load entity
		/// </summary>
		private static BE.RFI_TradingHistory Load(DataRow oRow)
		{
			BE.RFI_TradingHistory oReturn = new BE.RFI_TradingHistory();
			oReturn.TRADINGHISTORYID = (int)oRow["TRADINGHISTORYID"];
			oReturn.VENDORID = (int)oRow["VENDORID"];
            oReturn.TURNOVER = (oRow["TURNOVER"] == DBNull.Value ? (null) : ((float?)oRow["TURNOVER"]));
			oReturn.NETPROFIT = (oRow["NETPROFIT"] == DBNull.Value ? (null) : ((float?)oRow["NETPROFIT"]));
			oReturn.PERBYCONSTAFFRATION = (oRow["PERBYCONSTAFFRATION"] == DBNull.Value ? (null) : ((string)oRow["PERBYCONSTAFFRATION"]));
			oReturn.YEAR = (oRow["YEAR"] == DBNull.Value ? (null) : ((int?)oRow["YEAR"]));
			return oReturn;
		}

		/// <summary>
		/// Insert entity
		/// </summary>
		public static int Insert(BE.RFI_TradingHistory oRFI_TradingHistory)
		{
			return SqlSrv.SqlHelper.ExecuteNonQuery(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_TRADINGHISTORY_INSERT", oRFI_TradingHistory.ItemParameter());
		}

		/// <summary>
		/// Search entity
		/// </summary>
		public static BE.RFI_TradingHistory Select(int tradinghistoryid)
		{
			DataSet dsRFI_TradingHistory = SqlSrv.SqlHelper.ExecuteDataset(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_TRADINGHISTORY_SELECT", new System.Data.SqlClient.SqlParameter[]{ new System.Data.SqlClient.SqlParameter("@TRADINGHISTORYID", tradinghistoryid) });
			BE.RFI_TradingHistory oRFI_TradingHistory = null;
			if (dsRFI_TradingHistory.Tables[0].Rows.Count > 0)
				oRFI_TradingHistory = RFI_TradingHistory_Base_DAL.Load(dsRFI_TradingHistory.Tables[0].Rows[0]);
			return oRFI_TradingHistory;
		}

		/// <summary>
		/// Check if entity exists
		/// </summary>
		public static bool Exists(int tradinghistoryid)
		{
			return Convert.ToInt32(SqlSrv.SqlHelper.ExecuteScalar(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_TRADINGHISTORY_EXISTS", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@TRADINGHISTORYID", tradinghistoryid) })) > 0;
		}

		/// <summary>
		/// Fill entity list
		/// </summary>
		public static DataTable Fill()
		{
			DataSet dsRFI_TradingHistory = SqlSrv.SqlHelper.ExecuteDataset(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_TRADINGHISTORY_FILL");
			return dsRFI_TradingHistory.Tables[0];
		}

		/// <summary>
		/// Update entity
		/// </summary>
		public static int Update(BE.RFI_TradingHistory oRFI_TradingHistory)
		{
			return SqlSrv.SqlHelper.ExecuteNonQuery(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_TRADINGHISTORY_UPDATE", oRFI_TradingHistory.ItemParameter());
		}

		/// <summary>
		/// Delete entity record
		/// </summary>
		public static int Delete(int tradinghistoryid)
		{
			return SqlSrv.SqlHelper.ExecuteNonQuery(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_TRADINGHISTORY_DELETE", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@TRADINGHISTORYID", tradinghistoryid) });
		}
		/// <summary>
		/// Delete entity ALL records
		/// </summary>
		public static int DeleteAll()
		{
			return SqlSrv.SqlHelper.ExecuteNonQuery(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_TRADINGHISTORY_DELETEALL");
		}
	}
}
