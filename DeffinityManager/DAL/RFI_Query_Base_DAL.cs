using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using SqlSrv = Microsoft.ApplicationBlocks.Data;

namespace Deffinity.DAL
{
	/// <summary>
	/// Table RFI_Query
	/// 
	/// Generated by matricrix's C# Layer Builder
	/// 23/06/2009 17:12:11
	/// </summary>
	public class RFI_Query_Base_DAL
	{

		/// <summary>
		/// Load entity
		/// </summary>
		private static BE.RFI_Query Load(DataRow oRow)
		{
			BE.RFI_Query oReturn = new BE.RFI_Query();
			oReturn.QUERYID = (int)oRow["QUERYID"];
			oReturn.PROJECTREFERENCE = (int)oRow["PROJECTREFERENCE"];
			oReturn.QUERYRAISED = (string)oRow["QUERYRAISED"];
			oReturn.RESPONSE = (oRow["RESPONSE"] == DBNull.Value ? (null) : ((string)oRow["RESPONSE"]));
			oReturn.VENDORID = (oRow["VENDORID"] == DBNull.Value ? (null) : ((int?)oRow["VENDORID"]));
			oReturn.DATERAISED = (oRow["DATERAISED"] == DBNull.Value ? (null) : ((DateTime?)oRow["DATERAISED"]));
			oReturn.RESPONDEDBYID = (oRow["RESPONDEDBYID"] == DBNull.Value ? (null) : ((int?)oRow["RESPONDEDBYID"]));
			oReturn.DATERESPONDED = (oRow["DATERESPONDED"] == DBNull.Value ? (null) : ((DateTime?)oRow["DATERESPONDED"]));
			oReturn.DOCUMENTID = (oRow["DOCUMENTID"] == DBNull.Value ? (Guid.Empty) : ((Guid)oRow["DOCUMENTID"]));
			oReturn.VISIBLETOALL = (oRow["VISIBLETOALL"] == DBNull.Value ? (null) : ((bool?)oRow["VISIBLETOALL"]));
			oReturn.SECTIONID = (oRow["SECTIONID"] == DBNull.Value ? (null) : ((int?)oRow["SECTIONID"]));
			return oReturn;
		}

		/// <summary>
		/// Insert entity
		/// </summary>
		public static int Insert(BE.RFI_Query oRFI_Query)
		{
			return SqlSrv.SqlHelper.ExecuteNonQuery(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_QUERY_INSERT", oRFI_Query.ItemParameter());
		}

		/// <summary>
		/// Search entity
		/// </summary>
		public static BE.RFI_Query Select(int queryid)
		{
			DataSet dsRFI_Query = SqlSrv.SqlHelper.ExecuteDataset(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_QUERY_SELECT", new System.Data.SqlClient.SqlParameter[]{ new System.Data.SqlClient.SqlParameter("@QUERYID", queryid) });
			BE.RFI_Query oRFI_Query = null;
			if (dsRFI_Query.Tables[0].Rows.Count > 0)
				oRFI_Query = RFI_Query_Base_DAL.Load(dsRFI_Query.Tables[0].Rows[0]);
			return oRFI_Query;
		}

		/// <summary>
		/// Check if entity exists
		/// </summary>
		public static bool Exists(int queryid)
		{
			return Convert.ToInt32(SqlSrv.SqlHelper.ExecuteScalar(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_QUERY_EXISTS", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@QUERYID", queryid) })) > 0;
		}

		/// <summary>
		/// Fill entity list
		/// </summary>
		public static DataTable Fill(int ProjectReference)
		{
            return Fill(ProjectReference, 0);
		}
        public static DataTable Fill(int ProjectReference,int VendorID)
        {
            DataSet dsRFI_Query = SqlSrv.SqlHelper.ExecuteDataset(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_QUERY_FILL_BYVENDOR", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@PROJECTREFERENCE", ProjectReference), new System.Data.SqlClient.SqlParameter("@VENDORID", VendorID) });
            return dsRFI_Query.Tables[0];
        }
        public static  DataTable FillDropdown(int ProjectReference, string spName)
        {
            DataSet dsRFI_Query = SqlSrv.SqlHelper.ExecuteDataset(Connection.ConnectionString, CommandType.StoredProcedure, spName, new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@PROJECTREFERENCE", ProjectReference) });
            return dsRFI_Query.Tables[0];
        }

		/// <summary>
		/// Update entity
		/// </summary>
		public static int Update(BE.RFI_Query oRFI_Query)
		{
			return SqlSrv.SqlHelper.ExecuteNonQuery(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_QUERY_UPDATE", oRFI_Query.ItemParameter());
		}

        public static int UpdateWithoutDocument(BE.RFI_Query oRFI_Query)
        {
            return SqlSrv.SqlHelper.ExecuteNonQuery(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_QUERY_UPDATEWITHOUTDOCUMENT", oRFI_Query.ItemParameter());
        }


		/// <summary>
		/// Delete entity record
		/// </summary>
		public static int Delete(int queryid)
		{
			return SqlSrv.SqlHelper.ExecuteNonQuery(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_QUERY_DELETE", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@QUERYID", queryid) });
		}
		/// <summary>
		/// Delete entity ALL records
		/// </summary>
		public static int DeleteAll()
		{
			return SqlSrv.SqlHelper.ExecuteNonQuery(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_QUERY_DELETEALL");
		}
        public static int GetVendorID(int ContractorID)
        {
            return Convert.ToInt32(SqlSrv.SqlHelper.ExecuteScalar(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_GETVENDORID", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@CONTRACTORID", ContractorID ) }));
        }
	}
}
