using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using SqlSrv = Microsoft.ApplicationBlocks.Data;

namespace Deffinity.DAL
{
	/// <summary>
	/// Table RFI_Vendor
	/// 
	/// Generated by matricrix's C# Layer Builder
	/// 23/06/2009 17:12:35
	/// 
	/// Remark: Use this class to write custom code.
	/// </summary>
	public class RFI_Vendor_DAL : RFI_Vendor_Base_DAL
	{


		/// <summary>
		/// Constructor
		/// </summary>
		private RFI_Vendor_DAL() { }
        /// <summary>
        /// Check if entity exists
        /// </summary>
        public static bool Exists(string vendorName, string vendorLogin)
        {
            return Convert.ToInt32(SqlSrv.SqlHelper.ExecuteScalar(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_VENDOR_NAMES_EXISTS", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@VENDORNAME", vendorName), new System.Data.SqlClient.SqlParameter("@VENDORLOGIN", vendorLogin) })) > 0;
        }
        /// <summary>
        /// Fill entity list wrt to logged in user
        /// </summary>
        public static DataTable Fill(int contractorID)
        {
            DataSet dsRFI_Vendor = SqlSrv.SqlHelper.ExecuteDataset(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_VENDORSUMMARY", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@CONTRACTORID", contractorID)});
            return dsRFI_Vendor.Tables[0];
        }

        /// <summary>
        /// GET VENDORS FOR SUBMISSION SUMMARY
        /// </summary>
        public static DataTable GetSubmissionVendors(int projectReference)
        {
            DataSet dsRFI_Vendor = SqlSrv.SqlHelper.ExecuteDataset(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_GETVENDORS_SUBMISSIONBOMOVERVIEW", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@PROJECTREFERENCE", projectReference) });
            return dsRFI_Vendor.Tables[0];
        }
        /// <summary>
        /// GET VENDORS FOR SUBMITTEDDOCS
        /// </summary>
        public static DataTable GetSubmissionVendors_Docs(int projectReference,int vendorID)
        {
            DataSet dsRFI_Vendor = SqlSrv.SqlHelper.ExecuteDataset(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_GETVENDORS", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@PROJECTREFERENCE", projectReference), new System.Data.SqlClient.SqlParameter("@VENDORID", vendorID) });
            return dsRFI_Vendor.Tables[0];
        }
        /// <summary>
        /// GET VENDORS FOR SUBMITTEDDOCS
        /// </summary>
        public static DataTable GetSubmissionVendors_Docs(int projectReference)
        {
            return GetSubmissionVendors_Docs(projectReference, 0);
        }
        /// <summary>
        /// GET VENDORS FOR SUBMISSION SUMMARY
        /// </summary>
        public static DataTable GetSubmissionSummary(int projectReference)
        {
            DataSet dsRFI_Vendor = SqlSrv.SqlHelper.ExecuteDataset(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_GETVENDORS_SUBMISSIONSUMMARY", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@PROJECTREFERENCE", projectReference) });
            return dsRFI_Vendor.Tables[0];
        }
        /// <summary>
        /// GET CONTRACTORID
        /// </summary>
        public static int GetContractorID(int vendorID)
        {
            int i_ContractorID = Convert.ToInt32(SqlSrv.SqlHelper.ExecuteScalar(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_GETCONTRACTORID", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@VendorID", vendorID) }));
            return i_ContractorID;
        }

        public static int DeleteVendorByvendorID(int vendorID)
        {
            int i = Convert.ToInt32(SqlSrv.SqlHelper.ExecuteScalar(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_DELETEVENDOR", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@VendorID", vendorID) }));
            return i;
        }
	}
}
