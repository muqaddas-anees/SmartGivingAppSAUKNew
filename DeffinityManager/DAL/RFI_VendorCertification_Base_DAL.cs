using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using SqlSrv = Microsoft.ApplicationBlocks.Data;

namespace Deffinity.DAL
{
	/// <summary>
	/// Table RFI_VendorCertification
	/// 
	/// Generated by matricrix's C# Layer Builder
	/// 23/06/2009 17:12:40
	/// </summary>
	public class RFI_VendorCertification_Base_DAL
	{

		/// <summary>
		/// Load entity
		/// </summary>
		private static BE.RFI_VendorCertification Load(DataRow oRow)
		{
			BE.RFI_VendorCertification oReturn = new BE.RFI_VendorCertification();
			oReturn.CERTIFICATIONID = (int)oRow["CERTIFICATIONID"];
			oReturn.VENDORID = (int)oRow["VENDORID"];
			oReturn.CERTIFICATION = (string)oRow["CERTIFICATION"];
            oReturn.CERTIFIEDFROM = (oRow["CERTIFIEDFROM"] == DBNull.Value ? (null) : ((DateTime?)oRow["CERTIFIEDFROM"]));
			oReturn.CERTIFICATEEXPIRY = (oRow["CERTIFICATEEXPIRY"] == DBNull.Value ? (null) : ((DateTime?)oRow["CERTIFICATEEXPIRY"]));
			oReturn.CERTIFICATEIMAGE = (oRow["CERTIFICATEIMAGE"] == DBNull.Value ? (Guid.Empty) : ((Guid)oRow["CERTIFICATEIMAGE"]));
			return oReturn;
		}

		/// <summary>
		/// Insert entity
		/// </summary>
		public static int Insert(BE.RFI_VendorCertification oRFI_VendorCertification)
		{
			return SqlSrv.SqlHelper.ExecuteNonQuery(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_VENDORCERTIFICATION_INSERT", oRFI_VendorCertification.ItemParameter());
		}

		/// <summary>
		/// Search entity
		/// </summary>
		public static BE.RFI_VendorCertification Select(int certificationid)
		{
			DataSet dsRFI_VendorCertification = SqlSrv.SqlHelper.ExecuteDataset(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_VENDORCERTIFICATION_SELECT", new System.Data.SqlClient.SqlParameter[]{ new System.Data.SqlClient.SqlParameter("@CERTIFICATIONID", certificationid) });
			BE.RFI_VendorCertification oRFI_VendorCertification = null;
			if (dsRFI_VendorCertification.Tables[0].Rows.Count > 0)
				oRFI_VendorCertification = RFI_VendorCertification_Base_DAL.Load(dsRFI_VendorCertification.Tables[0].Rows[0]);
			return oRFI_VendorCertification;
		}

		/// <summary>
		/// Check if entity exists
		/// </summary>
		public static bool Exists(int certificationid)
		{
			return Convert.ToInt32(SqlSrv.SqlHelper.ExecuteScalar(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_VENDORCERTIFICATION_EXISTS", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@CERTIFICATIONID", certificationid) })) > 0;
		}

		/// <summary>
		/// Fill entity list
		/// </summary>
		public static DataTable Fill()
		{
			DataSet dsRFI_VendorCertification = SqlSrv.SqlHelper.ExecuteDataset(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_VENDORCERTIFICATION_FILL");
			return dsRFI_VendorCertification.Tables[0];
		}

		/// <summary>
		/// Update entity
		/// </summary>
		public static int Update(BE.RFI_VendorCertification oRFI_VendorCertification)
		{
			return SqlSrv.SqlHelper.ExecuteNonQuery(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_VENDORCERTIFICATION_UPDATE", oRFI_VendorCertification.ItemParameter());
		}

		/// <summary>
		/// Delete entity record
		/// </summary>
		public static int Delete(int certificationid)
		{
			return SqlSrv.SqlHelper.ExecuteNonQuery(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_VENDORCERTIFICATION_DELETE", new System.Data.SqlClient.SqlParameter[] { new System.Data.SqlClient.SqlParameter("@CERTIFICATIONID", certificationid) });
		}
		/// <summary>
		/// Delete entity ALL records
		/// </summary>
		public static int DeleteAll()
		{
			return SqlSrv.SqlHelper.ExecuteNonQuery(Connection.ConnectionString, CommandType.StoredProcedure, "dbo.DEFFINITY_RFI_VENDORCERTIFICATION_DELETEALL");
		}
	}
}
